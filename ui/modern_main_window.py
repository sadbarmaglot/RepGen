import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
from pathlib import Path
from PIL import Image, ImageTk
import os
import sys
import json
import io
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
from ui.clipboard_support import ClipboardEntry, ClipboardScrolledText

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from adapters.ai_adapter import analyze_local_photo, batch_analyze_photos
from adapters.file_manager import WindowsFileManager
from ui.project_dialogs import ProjectDialog, ProjectManagerDialog

# –ò–º–ø–æ—Ä—Ç –¥–∏–∞–ª–æ–≥–æ–≤ (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
try:
    from ui.model_3d_dialog import Model3DDialog
    HAS_3D_ANALYSIS = True
except ImportError:
    HAS_3D_ANALYSIS = False

class PlanDialog:
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞"""
    
    def __init__(self, parent, title="–î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω"):
        self.result = None
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        self.dialog = tk.Toplevel(parent)
        self.dialog.title(title)
        self.dialog.geometry("400x300")
        self.dialog.resizable(False, False)
        self.dialog.transient(parent)
        self.dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.dialog.update_idletasks()
        x = (self.dialog.winfo_screenwidth() // 2) - (400 // 2)
        y = (self.dialog.winfo_screenheight() // 2) - (300 // 2)
        self.dialog.geometry(f"400x300+{x}+{y}")
        
        self.create_widgets()
        
        # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        self.name_entry.focus()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.dialog.protocol("WM_DELETE_WINDOW", self.cancel)
        
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.dialog, padding=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
        name_label = ttk.Label(main_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞:")
        name_label.pack(anchor='w', pady=(0, 5))
        
        self.name_var = tk.StringVar()
        self.name_entry = ttk.Entry(main_frame, textvariable=self.name_var, width=50)
        self.name_entry.pack(fill=tk.X, pady=(0, 15))
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
        desc_label = ttk.Label(main_frame, text="–û–ø–∏—Å–∞–Ω–∏–µ:")
        desc_label.pack(anchor='w', pady=(0, 5))
        
        self.desc_text = tk.Text(main_frame, height=8, width=50, wrap=tk.WORD)
        self.desc_text.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(fill=tk.X)
        
        ttk.Button(
            buttons_frame,
            text="–û—Ç–º–µ–Ω–∞",
            command=self.cancel
        ).pack(side=tk.RIGHT, padx=(5, 0))
        
        ttk.Button(
            buttons_frame,
            text="OK",
            command=self.ok
        ).pack(side=tk.RIGHT)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Enter –∫ –∫–Ω–æ–ø–∫–µ OK
        self.dialog.bind('<Return>', lambda e: self.ok())
        self.dialog.bind('<Escape>', lambda e: self.cancel())
    
    def ok(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è OK"""
        name = self.name_var.get().strip()
        description = self.desc_text.get("1.0", tk.END).strip()
        
        if not name:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        self.result = (name, description)
        self.dialog.destroy()
    
    def cancel(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã"""
        self.result = None
        self.dialog.destroy()

class ModernDefectAnalyzerWindow:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ò–ò-–ò–Ω–∂–µ–Ω–µ—Ä–∞"""
    
    def __init__(self, user_info=None):
        self.user_info = user_info
        
        # –ï—Å–ª–∏ user_info –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ auth_client
        if not self.user_info:
            try:
                from adapters.auth_client import auth_client
                if auth_client.is_authenticated():
                    user_info_result = auth_client.get_user_info()
                    if user_info_result.get('success'):
                        self.user_info = user_info_result['user']
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        
        self.root = tk.Tk()
        self.root.title("üèóÔ∏è –ò–ò-–ò–Ω–∂–µ–Ω–µ—Ä v1.2")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –≤ 90% —ç–∫—Ä–∞–Ω–∞
        window_width = int(screen_width * 0.9)
        window_height = int(screen_height * 0.9)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        
        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        self.root.minsize(1000, 700)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑—É–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–Ω–∞
        self.setup_window_scaling()
        
        # –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        self.file_manager = WindowsFileManager()
        
        # –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_results = []
        
        # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–∑–Ω–æ—Å–∞ (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏)
        self.wear_calculator = None
        
        # –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
        self.current_tab = "general"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self.setup_styles()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.load_recent_analyses()
        
    def setup_window_scaling(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        self.root.bind('<Configure>', self.on_window_resize)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.min_element_width = 200
        self.min_element_height = 100
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scale_factor = 1.0
        
    def on_window_resize(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞"""
        if event.widget == self.root:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            current_width = self.root.winfo_width()
            current_height = self.root.winfo_height()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            base_width = 1200  # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            base_height = 800
            
            scale_x = max(0.8, current_width / base_width)
            scale_y = max(0.8, current_height / base_height)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            self.scale_factor = min(scale_x, scale_y)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.apply_scaling()
    
    def apply_scaling(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã
            base_font_size = 11
            scaled_font_size = max(9, int(base_font_size * self.scale_factor))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ —Å –Ω–æ–≤—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ —à—Ä–∏—Ñ—Ç–æ–≤
            style = ttk.Style()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏
            style.configure('Header.TLabel', 
                           font=('Segoe UI', int(16 * self.scale_factor), 'bold'))
            style.configure('Subtitle.TLabel',
                           font=('Segoe UI', int(13 * self.scale_factor)))
            style.configure('Modern.TButton',
                           font=('Segoe UI', int(12 * self.scale_factor), 'bold'),
                           padding=(int(20 * self.scale_factor), int(10 * self.scale_factor)))
            style.configure('Secondary.TButton',
                           font=('Segoe UI', int(11 * self.scale_factor)),
                           padding=(int(16 * self.scale_factor), int(8 * self.scale_factor)))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
            if hasattr(self, 'results_tree'):
                self.results_tree.column('#0', width=int(50 * self.scale_factor))
                self.results_tree.column('file', width=int(200 * self.scale_factor))
                self.results_tree.column('status', width=int(100 * self.scale_factor))
                self.results_tree.column('defect', width=int(300 * self.scale_factor))
            
            if hasattr(self, 'construction_tree'):
                self.construction_tree.column("element", width=int(260 * self.scale_factor))
                self.construction_tree.column("description", width=int(480 * self.scale_factor))
            
            if hasattr(self, 'wear_tree'):
                self.wear_tree.column('element', width=int(300 * self.scale_factor))
                self.wear_tree.column('weight', width=int(120 * self.scale_factor))
                self.wear_tree.column('wear', width=int(120 * self.scale_factor))
                self.wear_tree.column('weighted_wear', width=int(140 * self.scale_factor))
            
            if hasattr(self, 'objects_tree'):
                self.objects_tree.column('name', width=int(200 * self.scale_factor))
                self.objects_tree.column('wear', width=int(120 * self.scale_factor))
                self.objects_tree.column('last_date', width=int(180 * self.scale_factor))
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
        primary_color = '#1e88e5'      # –°–∏–Ω–∏–π
        primary_hover = '#1976d2'      # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        secondary_color = '#64b5f6'    # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π
        secondary_hover = '#42a5f5'    # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        background_color = '#f5f5f5'   # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
        surface_color = '#ffffff'      # –ë–µ–ª—ã–π
        text_primary = '#212121'       # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π —Ç–µ–∫—Å—Ç
        text_secondary = '#757575'     # –°–µ—Ä—ã–π —Ç–µ–∫—Å—Ç
        border_color = '#e0e0e0'       # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –¥–ª—è –≥—Ä–∞–Ω–∏—Ü
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤
        style.configure('Header.TLabel', 
                       font=('Segoe UI', 16, 'bold'),
                       foreground=text_primary,
                       background=background_color)
        
        style.configure('Subtitle.TLabel',
                       font=('Segoe UI', 13),
                       foreground=text_secondary,
                       background=background_color)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        style.configure('Modern.TButton',
                       font=('Segoe UI', 12, 'bold'),
                       padding=(20, 10),
                       relief='flat',
                       borderwidth=0,
                       background=primary_color,
                       foreground='white')
        
        style.map('Modern.TButton',
                 background=[('active', primary_hover), ('!active', primary_color)],
                 foreground=[('active', 'white'), ('!active', 'white')])
        
        # –í—Ç–æ—Ä–∏—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        style.configure('Secondary.TButton',
                       font=('Segoe UI', 11),
                       padding=(16, 8),
                       relief='flat',
                       borderwidth=0,
                       background=secondary_color,
                       foreground='white')
        
        style.map('Secondary.TButton',
                 background=[('active', secondary_hover), ('!active', secondary_color)],
                 foreground=[('active', 'white'), ('!active', 'white')])
        
        # –í–∫–ª–∞–¥–∫–∏
        style.configure('Tab.TButton',
                       font=('Segoe UI', 12, 'bold'),
                       padding=(24, 12),
                       relief='flat',
                       borderwidth=0,
                       background=primary_color,
                       foreground='white')
        
        style.map('Tab.TButton',
                 background=[('active', primary_hover), ('!active', primary_color)],
                 foreground=[('active', 'white'), ('!active', 'white')])
        
        style.configure('InactiveTab.TButton',
                       font=('Segoe UI', 12),
                       padding=(24, 12),
                       relief='flat',
                       borderwidth=0,
                       background=text_secondary,
                       foreground='white')
        
        style.map('InactiveTab.TButton',
                 background=[('active', '#616161'), ('!active', text_secondary)],
                 foreground=[('active', 'white'), ('!active', 'white')])
        
        # –§—Ä–µ–π–º—ã
        style.configure('Main.TFrame',
                       background=background_color,
                       relief='flat',
                       borderwidth=0)
        
        style.configure('Content.TFrame',
                       background=surface_color,
                       relief='flat',
                       borderwidth=0)
        
        # LabelFrame —Å—Ç–∏–ª–∏
        style.configure('TLabelframe',
                       background=background_color,
                       relief='flat',
                       borderwidth=1,
                       bordercolor=border_color)
        
        style.configure('TLabelframe.Label',
                       font=('Segoe UI', 13, 'bold'),
                       foreground=text_primary,
                       background=background_color)
        
        # Entry —Å—Ç–∏–ª–∏
        style.configure('TEntry',
                       font=('Segoe UI', 11),
                       background=surface_color,
                       fieldbackground=surface_color,
                       borderwidth=1,
                       relief='flat',
                       bordercolor=border_color)
        
        style.map('TEntry',
                 bordercolor=[('focus', primary_color)],
                 fieldbackground=[('focus', surface_color)])
        
        # Treeview —Å—Ç–∏–ª–∏
        style.configure('Treeview',
                       font=('Segoe UI', 10),
                       background=surface_color,
                       foreground=text_primary,
                       fieldbackground=surface_color,
                       borderwidth=1,
                       relief='flat',
                       bordercolor=border_color)
        
        style.configure('Treeview.Heading',
                       font=('Segoe UI', 11, 'bold'),
                       background=primary_color,
                       foreground='white',
                       relief='flat',
                       borderwidth=0)
        
        style.map('Treeview',
                 background=[('selected', primary_color)],
                 foreground=[('selected', 'white')])
        
        # Scrollbar —Å—Ç–∏–ª–∏
        style.configure('Vertical.TScrollbar',
                       background=border_color,
                       bordercolor=border_color,
                       arrowcolor=text_secondary,
                       troughcolor=background_color,
                       width=12,
                       relief='flat')
        
        style.map('Vertical.TScrollbar',
                 background=[('active', primary_color)],
                 arrowcolor=[('active', 'white')])
        
        # –°—Ç–∞—Ç—É—Å–Ω—ã–µ —Ü–≤–µ—Ç–∞
        style.configure('Success.TLabel', foreground='#4caf50')
        style.configure('Error.TLabel', foreground='#f44336')
        style.configure('Warning.TLabel', foreground='#ff9800')
        
    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.root, style='Main.TFrame')
        main_container.pack(fill=tk.BOTH, expand=True)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        self.create_top_panel(main_container)
        
        # –ü–∞–Ω–µ–ª—å –≤–∫–ª–∞–¥–æ–∫
        self.create_tab_panel(main_container)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        self.create_content_area(main_container)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.create_status_bar(main_container)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.root.after(1000, self.load_object_info_from_server)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
        
    def create_top_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏"""
        top_frame = ttk.Frame(parent, style='Main.TFrame')
        top_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        project_frame = ttk.Frame(top_frame, style='Main.TFrame')
        project_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞
        self.project_title_label = ttk.Label(
            project_frame,
            text=f"–ü—Ä–æ–µ–∫—Ç: {self.file_manager.current_project}",
            style='Header.TLabel'
        )
        self.project_title_label.pack(side=tk.LEFT, padx=(0, 20))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã –ø—Ä–æ–µ–∫—Ç–∞
        change_project_button = ttk.Button(
            project_frame,
            text="üîÑ –°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç",
            style='Secondary.TButton',
            command=self.change_project
        )
        change_project_button.pack(side=tk.LEFT)
        
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        actions_frame = ttk.Frame(top_frame, style='Main.TFrame')
        actions_frame.pack(side=tk.RIGHT)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if self.user_info:
            user_name = self.user_info.get('name') or self.user_info.get('email', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            user_label = ttk.Label(
                actions_frame,
                text=f"üë§ {user_name}",
                style='Subtitle.TLabel'
            )
            user_label.pack(side=tk.RIGHT, padx=(0, 10))
            
            # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
            logout_button = ttk.Button(
                actions_frame,
                text="üö™ –í—ã–π—Ç–∏",
                style='Secondary.TButton',
                command=self.logout
            )
            logout_button.pack(side=tk.RIGHT)
        
    def create_tab_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –≤–∫–ª–∞–¥–æ–∫"""
        tab_frame = ttk.Frame(parent, style='Main.TFrame')
        tab_frame.pack(fill=tk.X, padx=10, pady=(0, 5))
        
        # –í–∫–ª–∞–¥–∫–∏
        self.tabs = {}
        
        tab_configs = [
            ("general", "üìã –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ", self.show_general_data),
            ("construction", "üèóÔ∏è –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ", self.show_construction_data),
            ("defects", "‚ö†Ô∏è –í–µ–¥–æ–º–æ—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–æ–≤", self.show_defects_data),
            ("wear", "üìä –†–∞—Å—á–µ—Ç –∏–∑–Ω–æ—Å–∞", self.show_wear_data),
            ("export", "üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ Word", self.show_export_data)
        ]
        
        for tab_id, tab_text, tab_command in tab_configs:
            tab_button = ttk.Button(
                tab_frame,
                text=tab_text,
                style='Tab.TButton' if tab_id == self.current_tab else 'InactiveTab.TButton',
                command=lambda tid=tab_id, cmd=tab_command: self.switch_tab(tid, cmd)
            )
            tab_button.pack(side=tk.LEFT, padx=(0, 5))
            self.tabs[tab_id] = tab_button
            
    def create_content_area(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        self.content_frame = ttk.Frame(parent, style='Content.TFrame')
        self.content_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
        self.show_general_data()
        
    def create_status_bar(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞"""
        status_frame = ttk.Frame(parent, style='Main.TFrame')
        status_frame.pack(fill=tk.X, side=tk.BOTTOM, padx=10, pady=5)
        
        self.status_label = ttk.Label(status_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", style='Subtitle.TLabel')
        self.status_label.pack(side=tk.LEFT)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress = ttk.Progressbar(status_frame, mode='indeterminate')
        self.progress.pack(side=tk.RIGHT, padx=5)
        
    def switch_tab(self, tab_id, tab_command):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫
        for tid, button in self.tabs.items():
            if tid == tab_id:
                button.configure(style='Tab.TButton')
            else:
                button.configure(style='InactiveTab.TButton')
        
        self.current_tab = tab_id
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        for widget in self.content_frame.winfo_children():
            widget.destroy()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        tab_command()
        
    def show_general_data(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∫–ª–∞–¥–∫—É –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        main_info_frame = ttk.LabelFrame(self.content_frame, text="–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padding=20)
        main_info_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # –ü–æ–ª–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        name_frame = ttk.Frame(main_info_frame)
        name_frame.pack(fill=tk.X, pady=(0, 10))
        
        name_label = ttk.Label(name_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:", style='Subtitle.TLabel')
        name_label.pack(side=tk.LEFT, padx=(0, 10))
        
        self.object_name_var = tk.StringVar(value=self.file_manager.current_project)
        name_entry = ClipboardEntry(name_frame, textvariable=self.object_name_var, width=40, font=('Segoe UI', 11))
        name_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # –ü–æ–ª–µ –¥–ª—è –∞–¥—Ä–µ—Å–∞
        address_frame = ttk.Frame(main_info_frame)
        address_frame.pack(fill=tk.X, pady=(0, 10))
        
        address_label = ttk.Label(address_frame, text="–ê–¥—Ä–µ—Å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è:", style='Subtitle.TLabel')
        address_label.pack(side=tk.LEFT, padx=(0, 10))
        
        self.object_address_var = tk.StringVar(value="–ê–¥—Ä–µ—Å —É—Ç–æ—á–Ω—è–µ—Ç—Å—è")
        address_entry = ClipboardEntry(address_frame, textvariable=self.object_address_var, width=40, font=('Segoe UI', 11))
        address_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # –ü–æ–ª–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        description_frame = ttk.Frame(main_info_frame)
        description_frame.pack(fill=tk.X, pady=(0, 10))
        
        description_label = ttk.Label(description_frame, text="–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:", style='Subtitle.TLabel')
        description_label.pack(side=tk.LEFT, padx=(0, 10), anchor='nw')
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        desc_text_frame = ttk.Frame(description_frame)
        desc_text_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        self.object_description_var = tk.StringVar(value="")
        description_text = tk.Text(desc_text_frame, height=4, width=40, font=('Segoe UI', 11), wrap=tk.WORD)
        description_text.pack(fill=tk.BOTH, expand=True)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        def on_description_change(event=None):
            self.object_description_var.set(description_text.get("1.0", tk.END).strip())
        
        description_text.bind('<KeyRelease>', on_description_change)
        description_text.bind('<FocusOut>', on_description_change)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        self.load_project_info()
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_button = ttk.Button(
            main_info_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
            style='Modern.TButton',
            command=self.save_project_info
        )
        save_button.pack(pady=(10, 0))
        
        # –ë–ª–æ–∫ –ø–ª–∞–Ω–æ–≤
        self.create_plans_section(self.content_frame)
        
        
    def show_construction_data(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∫–ª–∞–¥–∫—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        for widget in self.content_frame.winfo_children():
            widget.destroy()
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if not hasattr(self, 'construction_data'):
            try:
                # –ò–º–ø–æ—Ä—Ç –¥–µ—Ä–µ–≤–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
                try:
                    from adapters.construction_data import (
                        CONSTRUCTION_TREE, 
                        PREDEFINED_SOLUTIONS,
                        load_construction_data_from_json,
                        merge_construction_data
                    )
                    self.CONSTRUCTION_TREE = CONSTRUCTION_TREE
                    self.PREDEFINED_SOLUTIONS = PREDEFINED_SOLUTIONS
                except Exception:
                    # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
                    self.CONSTRUCTION_TREE = {
                        "–§—É–Ω–¥–∞–º–µ–Ω—Ç—ã": {
                            "–õ–µ–Ω—Ç–æ—á–Ω—ã–µ": {
                                "–ë—É—Ç–æ–≤—ã–µ": "–§—É–Ω–¥–∞–º–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ª–µ–Ω—Ç–æ—á–Ω—ã–º–∏ –∏–∑ –±—É—Ç–æ–≤–æ–π –∫–ª–∞–¥–∫–∏",
                                "–ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–µ": {
                                    "–ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–µ": "–§—É–Ω–¥–∞–º–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ª–µ–Ω—Ç–æ—á–Ω—ã–º–∏ –º–æ–Ω–æ–ª–∏—Ç–Ω—ã–º–∏",
                                    "–°–±–æ—Ä–Ω—ã–µ": "–§—É–Ω–¥–∞–º–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ª–µ–Ω—Ç–æ—á–Ω—ã–º–∏ –∏–∑ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–Ω—ã—Ö –±–ª–æ–∫–æ–≤",
                                },
                            },
                            "–°–≤–∞–π–Ω—ã–µ": {
                                "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ": "–§—É–Ω–¥–∞–º–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å–≤–∞–π–Ω—ã–º–∏ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º–∏ –∏–∑ –±—Ä—É—Å–∞",
                                "–ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–µ": {
                                    "__custom__": {
                                        "labels": ["–£–∫–∞–∂–∏—Ç–µ —Å–µ—á–µ–Ω–∏–µ, –º–º"],
                                        "callback": lambda section: (
                                            f"–§—É–Ω–¥–∞–º–µ–Ω—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å–≤–∞–π–Ω—ã–º–∏ –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–º–∏, —Å–µ—á–µ–Ω–∏–µ–º {section} –º–º"
                                        ),
                                    }
                                },
                            },
                        },
                        "–°—Ç–µ–Ω—ã": {
                            "–ö–∏—Ä–ø–∏—á–Ω—ã–µ": {
                                "__custom__": {
                                    "labels": ["–£–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É, –º–º"],
                                    "callback": lambda section: (
                                        f"–°—Ç–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–∑ –∫–∏—Ä–ø–∏—á–Ω–æ–π –∫–ª–∞–¥–∫–∏ –Ω–∞ —Ü–µ–º–µ–Ω—Ç–Ω–æ-–ø–µ—Å—á–∞–Ω–æ–º —Ä–∞—Å—Ç–≤–æ—Ä–µ, —Ç–æ–ª—â–∏–Ω–æ–π {section} –º–º"
                                    ),
                                }
                            },
                            "–ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–µ": {
                                "__custom__": {
                                    "labels": ["–£–∫–∞–∂–∏—Ç–µ —Å–µ—Ä–∏—é", "–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É"],
                                    "callback": lambda series, mark: (
                                        f"–°—Ç–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–∑ –Ω–∞–≤–µ—Å–Ω—ã—Ö —Å–±–æ—Ä–Ω—ã—Ö –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –º–∞—Ä–∫–∏ {mark} –ø–æ —Å–µ—Ä–∏–∏ {series}"
                                    ),
                                }
                            },
                        },
                        "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏—è": {
                            "–ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–µ": {
                                "–ü–ª–∏—Ç—ã –ü–ö": "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–∑ —Å–±–æ—Ä–Ω—ã—Ö –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã—Ö –ø–ª–∏—Ç –ü–ö",
                                "–ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–µ": "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –º–æ–Ω–æ–ª–∏—Ç–Ω—ã–º–∏ –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–º–∏",
                            }
                        },
                    }
                    self.PREDEFINED_SOLUTIONS = {}
                
                self.construction_data = []
                self._all_elements = list(self.CONSTRUCTION_TREE.keys())
                self._desc_label_to_text = {}
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π: {e}")
                return
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = ttk.Label(
            self.content_frame,
            text="–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
            style='Header.TLabel'
        )
        header_label.pack(pady=(20, 10))
        

        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.content_frame)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –¢–∞–±–ª–∏—Ü–∞
        table_frame = ttk.LabelFrame(main_frame, text="–°–æ—Å—Ç–∞–≤ —Ä–µ—à–µ–Ω–∏–π")
        table_frame.pack(fill=tk.BOTH, expand=True)

        self.construction_tree = ttk.Treeview(
            table_frame,
            columns=("element", "description"),
            show="headings",
            height=10,
        )
        self.construction_tree.heading("element", text="–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
        self.construction_tree.heading("description", text="–û–ø–∏—Å–∞–Ω–∏–µ")
        self.construction_tree.column("element", width=260)
        self.construction_tree.column("description", width=480)

        yscroll = ttk.Scrollbar(table_frame, orient=tk.VERTICAL, command=self.construction_tree.yview)
        self.construction_tree.configure(yscrollcommand=yscroll.set)
        self.construction_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        yscroll.pack(side=tk.RIGHT, fill=tk.Y)

        self.construction_tree.bind("<<TreeviewSelect>>", self._on_construction_row_select)

        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        tb = ttk.Frame(main_frame)
        tb.pack(fill=tk.X, pady=(6, 0))
        ttk.Button(tb, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", style='Secondary.TButton', command=self._add_construction_row).pack(side=tk.LEFT)
        ttk.Button(tb, text="üóë –£–¥–∞–ª–∏—Ç—å", style='Secondary.TButton', command=self._delete_construction_row).pack(side=tk.LEFT, padx=(6, 0))
        ttk.Button(tb, text="–û—á–∏—Å—Ç–∏—Ç—å", style='Secondary.TButton', command=self._clear_construction_all).pack(side=tk.LEFT, padx=(6, 0))
        ttk.Button(tb, text="üìã –ë—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è", style='Secondary.TButton', command=self._show_quick_solutions).pack(side=tk.RIGHT)

        # –†–µ–¥–∞–∫—Ç–æ—Ä
        editor = ttk.LabelFrame(main_frame, text="–†–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç—Ä–æ–∫–∏")
        editor.pack(fill=tk.X, pady=(10, 0))

        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        left = ttk.Frame(editor)
        left.grid(row=0, column=0, sticky="nsew", padx=(8, 8), pady=8)
        ttk.Label(left, text="–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è").pack(anchor=tk.W)
        self.element_combo = ttk.Combobox(left, state="normal")
        self.element_combo.pack(fill=tk.X, pady=(4, 0))

        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –æ–ø–∏—Å–∞–Ω–∏–µ
        right = ttk.Frame(editor)
        right.grid(row=0, column=1, sticky="nsew", padx=(8, 8), pady=8)
        ttk.Label(right, text="–û–ø–∏—Å–∞–Ω–∏–µ").pack(anchor=tk.W)
        self.desc_combo = ttk.Combobox(right, state="normal")
        self.desc_combo.pack(fill=tk.X, pady=(4, 0))

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
        actions = ttk.Frame(self.content_frame)
        actions.pack(fill=tk.X, padx=20, pady=10)
        ttk.Button(actions, text="–û—Ç–º–µ–Ω–∞", style='Secondary.TButton', command=self._cancel_construction_edits).pack(side=tk.RIGHT)
        ttk.Button(actions, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", style='Modern.TButton', command=self._save_construction_data).pack(side=tk.RIGHT, padx=(0, 10))

        # –î–∞–Ω–Ω—ã–µ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
        self.element_combo.configure(values=self._all_elements)
        self.element_combo.bind('<<ComboboxSelected>>', self._on_construction_element_change)
        self.element_combo.bind('<KeyRelease>', self._on_construction_element_change)

        # –£–¥–æ–±–Ω—ã–π –≤–≤–æ–¥: –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫/—Ñ–æ–∫—É—Å –≤—ã–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç
        self._enable_select_all(self.element_combo)
        self._enable_select_all(self.desc_combo)

        # –°–µ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        editor.grid_columnconfigure(0, weight=1)
        editor.grid_columnconfigure(1, weight=1)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self._load_saved_construction_data_silent()
        
    def show_defects_data(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∫–ª–∞–¥–∫—É –≤–µ–¥–æ–º–æ—Å—Ç–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = ttk.Label(
            self.content_frame,
            text="–í–µ–¥–æ–º–æ—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–æ–≤",
            style='Header.TLabel'
        )
        header_label.pack(pady=(20, 10))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
        main_paned = ttk.PanedWindow(self.content_frame, orient=tk.HORIZONTAL)
        main_paned.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.create_results_panel(main_paned)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
        self.create_details_panel(main_paned)
        
    def show_wear_data(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∫–ª–∞–¥–∫—É —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–Ω–æ—Å–∞"""
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        for widget in self.content_frame.winfo_children():
            widget.destroy()
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–∑–Ω–æ—Å–∞, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if not hasattr(self, 'wear_calculator') or self.wear_calculator is None:
            try:
                from adapters.wear_calculator import WearCalculator, BuildingTypeTemplates
                self.wear_calculator = WearCalculator()
                self._saved_wear_by_template = {}
                self._current_template_key = "default"
            except ImportError as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–Ω–æ—Å–∞: {e}")
                return
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = ttk.Label(
            self.content_frame,
            text="–†–∞—Å—á–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–Ω–æ—Å–∞ –∑–¥–∞–Ω–∏—è",
            style='Header.TLabel'
        )
        header_label.pack(pady=(20, 10))
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle_label = ttk.Label(
            self.content_frame,
            text="–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –í–°–ù 53-86(—Ä)",
            style='Subtitle.TLabel'
        )
        subtitle_label.pack(pady=(0, 20))
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        toolbar = ttk.Frame(self.content_frame)
        toolbar.pack(fill=tk.X, padx=20, pady=10)
        
        # –®–∞–±–ª–æ–Ω—ã –∑–¥–∞–Ω–∏–π
        templates_frame = ttk.LabelFrame(toolbar, text="–¢–∏–ø –∑–¥–∞–Ω–∏—è", padding=5)
        templates_frame.pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            templates_frame,
            text="üè† –ñ–∏–ª–æ–µ",
            style='Secondary.TButton',
            command=lambda: self.load_wear_template("residential")
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            templates_frame,
            text="üè¢ –û—Ñ–∏—Å–Ω–æ–µ", 
            style='Secondary.TButton',
            command=lambda: self.load_wear_template("office")
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            templates_frame,
            text="üè≠ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ",
            style='Secondary.TButton',
            command=lambda: self.load_wear_template("industrial") 
        ).pack(side=tk.LEFT, padx=2)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
        data_frame = ttk.LabelFrame(toolbar, text="–î–∞–Ω–Ω—ã–µ", padding=5)
        data_frame.pack(side=tk.LEFT, padx=(0, 10))

        ttk.Button(
            data_frame,
            text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ Word",
            style='Secondary.TButton',
            command=self.export_wear_to_word
        ).pack(side=tk.LEFT, padx=2)

        ttk.Button(
            data_frame,
            text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å",
            style='Secondary.TButton',
            command=self.reset_wear_data
        ).pack(side=tk.LEFT, padx=2)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        table_frame = ttk.LabelFrame(self.content_frame, text="–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–¥–∞–Ω–∏—è", padding=10)
        table_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        columns = ('element', 'weight', 'wear', 'weighted_wear')
        self.wear_tree = ttk.Treeview(
            table_frame,
            columns=columns,
            show='headings',
            height=12,
            selectmode='browse'
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.wear_tree.heading('element', text='–≠–ª–µ–º–µ–Ω—Ç—ã –∑–¥–∞–Ω–∏—è', anchor='center')
        self.wear_tree.heading('weight', text='–£–¥–µ–ª—å–Ω—ã–π –≤–µ—Å\n–≤ —Å—Ç–æ–∏–º–æ—Å—Ç–∏, %', anchor='center')
        self.wear_tree.heading('wear', text='–§–∏–∑–∏—á–µ—Å–∫–∏–π\n–∏–∑–Ω–æ—Å, %', anchor='center')
        self.wear_tree.heading('weighted_wear', text='–°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è\n—Å—Ç–µ–ø–µ–Ω—å –∏–∑–Ω–æ—Å–∞', anchor='center')
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        self.wear_tree.column('element', width=300)
        self.wear_tree.column('weight', width=120)
        self.wear_tree.column('wear', width=120)
        self.wear_tree.column('weighted_wear', width=140)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(table_frame, orient=tk.VERTICAL, command=self.wear_tree.yview)
        self.wear_tree.configure(yscrollcommand=scrollbar.set)
        
        self.wear_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.wear_tree.bind('<Double-1>', self.edit_wear_value)
        self.wear_tree.bind('<Button-1>', self.on_wear_tree_click)
        
        # –ü–∞–Ω–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_frame = ttk.LabelFrame(self.content_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞", padding=10)
        results_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # –û–±—â–∏–π –∏–∑–Ω–æ—Å
        total_frame = ttk.Frame(results_frame)
        total_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(total_frame, text="–û–±—â–∏–π —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –∏–∑–Ω–æ—Å –∑–¥–∞–Ω–∏—è:", 
                 font=("Segoe UI", 12, "bold")).pack(side=tk.LEFT)
        self.total_wear_label = ttk.Label(total_frame, text="0.0%", 
                                        font=("Segoe UI", 12, "bold"), foreground="green")
        self.total_wear_label.pack(side=tk.RIGHT)
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        condition_frame = ttk.Frame(results_frame)
        condition_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(condition_frame, text="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:", 
                 font=("Segoe UI", 11)).pack(side=tk.LEFT)
        self.condition_label = ttk.Label(condition_frame, text="–ò—Å–ø—Ä–∞–≤–Ω–æ–µ", 
                                       font=("Segoe UI", 11), foreground="green")
        self.condition_label.pack(side=tk.RIGHT)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.recommendation_text = tk.Text(results_frame, height=3, wrap=tk.WORD, 
                                         font=("Segoe UI", 10))
        self.recommendation_text.pack(fill=tk.X, pady=(5, 0))
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if hasattr(self, 'wear_calculator') and self.wear_calculator is not None:
            self.load_wear_data()
            self.update_wear_totals()
        
    def show_export_data(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∫–ª–∞–¥–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = ttk.Label(
            self.content_frame,
            text="–≠–∫—Å–ø–æ—Ä—Ç –≤ Word",
            style='Header.TLabel'
        )
        header_label.pack(pady=(20, 10))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content_frame = ttk.Frame(self.content_frame)
        content_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ
        info_label = ttk.Label(
            content_frame,
            text="–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word",
            style='Subtitle.TLabel'
        )
        info_label.pack(pady=(0, 20))
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_button = ttk.Button(
            content_frame,
            text="üìÑ –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç",
            style='Modern.TButton',
            command=self.export_to_docx
        )
        export_button.pack()
        
    def create_results_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        results_frame = ttk.LabelFrame(parent, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞", padding=10)
        parent.add(results_frame, weight=1)
        
        # –ü–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ
        buttons_frame = ttk.Frame(results_frame)
        buttons_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
        add_photo_button = ttk.Button(
            buttons_frame,
            text="üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ",
            style='Secondary.TButton',
            command=self.add_photo
        )
        add_photo_button.pack(side=tk.LEFT, padx=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        batch_analyze_button = ttk.Button(
            buttons_frame,
            text="üîç –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            style='Secondary.TButton',
            command=self.batch_analyze_photos
        )
        batch_analyze_button.pack(side=tk.LEFT, padx=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        clear_results_button = ttk.Button(
            buttons_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            style='Secondary.TButton',
            command=self.clear_results
        )
        clear_results_button.pack(side=tk.LEFT, padx=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
        refresh_button = ttk.Button(
            buttons_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            style='Secondary.TButton',
            command=self.refresh_results
        )
        refresh_button.pack(side=tk.LEFT)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_tree = ttk.Treeview(
            results_frame, 
            columns=('file', 'status', 'defect'), 
            show='tree headings',
            height=15
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.results_tree.heading('#0', text='‚Ññ')
        self.results_tree.heading('file', text='–§–∞–π–ª')
        self.results_tree.heading('status', text='–°—Ç–∞—Ç—É—Å')
        self.results_tree.heading('defect', text='–î–µ—Ñ–µ–∫—Ç')
        
        self.results_tree.column('#0', width=50)
        self.results_tree.column('file', width=200)
        self.results_tree.column('status', width=100)
        self.results_tree.column('defect', width=300)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        results_scroll = ttk.Scrollbar(results_frame, orient=tk.VERTICAL, command=self.results_tree.yview)
        self.results_tree.configure(yscrollcommand=results_scroll.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.results_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        results_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
        self.results_tree.bind('<<TreeviewSelect>>', self.on_result_select)
        self.results_tree.bind('<ButtonRelease-1>', self.on_result_select)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.results_tree.bind('<Double-1>', self.on_double_click_analyze)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        self.populate_results_table()
        
    def populate_results_table(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        if hasattr(self, 'results_tree'):
            for item in self.results_tree.get_children():
                self.results_tree.delete(item)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü—É
        for i, result in enumerate(self.analysis_results):
            self.add_result_to_tree(result, i)
        
    def create_details_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        details_frame = ttk.LabelFrame(parent, text="–î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞", padding=10)
        parent.add(details_frame, weight=2)
        
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–∞
        details_paned = ttk.PanedWindow(details_frame, orient=tk.VERTICAL)
        details_paned.pack(fill=tk.BOTH, expand=True)
        
        # –ü–∞–Ω–µ–ª—å –¥–ª—è —Ñ–æ—Ç–æ
        photo_frame = ttk.Frame(details_paned)
        details_paned.add(photo_frame, weight=1)
        
        self.photo_label = ttk.Label(photo_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", anchor=tk.CENTER)
        self.photo_label.pack(fill=tk.BOTH, expand=True)
        
        # –ü–∞–Ω–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–µ—Ç–∞–ª–µ–π
        text_frame = ttk.Frame(details_paned)
        details_paned.add(text_frame, weight=1)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        self.details_text = ClipboardScrolledText(
            text_frame, 
            wrap=tk.WORD, 
            height=10,
            font=('Segoe UI', 11)
        )
        self.details_text.pack(fill=tk.BOTH, expand=True)
        
    def change_project(self):
        """–°–º–µ–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        from ui.welcome_window import ProjectSelectionWindow
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ
        self.root.destroy()
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        project_window = ProjectSelectionWindow(self.user_info)
        project_window.run()
        
    def update_projects_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤"""
        projects = self.file_manager.get_all_projects()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç
        if self.file_manager.current_project in projects:
            self.project_title_label.configure(text=f"–ü—Ä–æ–µ–∫—Ç: {self.file_manager.current_project}")
        else:
            self.project_title_label.configure(text=f"–ü—Ä–æ–µ–∫—Ç: {projects[0] if projects else '–û–±—â–∏–π –æ–±—ä–µ–∫—Ç'}")
    
            
    def on_project_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞"""
        new_project = self.file_manager.current_project
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_current_results()
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ
        self.analysis_results.clear()
        if hasattr(self, 'results_tree'):
            self.results_tree.delete(*self.results_tree.get_children())
        self.load_recent_analyses()
        
        # –û—á–∏—â–∞–µ–º –ø–∞–Ω–µ–ª—å –¥–µ—Ç–∞–ª–µ–π
        if hasattr(self, 'details_text'):
            self.details_text.delete(1.0, tk.END)
        if hasattr(self, 'photo_label'):
            self.photo_label.configure(image="", text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
            
        self.update_status(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –æ–±—ä–µ–∫—Ç: {new_project}")
        self.update_projects_list()
        
    def save_current_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Å–º–µ–Ω–æ–π –æ–±—ä–µ–∫—Ç–∞"""
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ
        pass
        
    def select_photos(self):
        """–í—ã–±–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        file_paths = filedialog.askopenfilenames(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤",
            filetypes=[
                ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png *.bmp *.tiff"),
                ("JPEG —Ñ–∞–π–ª—ã", "*.jpg *.jpeg"),
                ("PNG —Ñ–∞–π–ª—ã", "*.png"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        
        if file_paths:
            self.add_photos_to_analysis(file_paths)
            
    def add_photos_to_analysis(self, file_paths):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        for file_path in file_paths:
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ —Ä–∞–±–æ—á—É—é –ø–∞–ø–∫—É
            copied_path = self.file_manager.copy_photo_to_workspace(file_path)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–∫ "–æ–∂–∏–¥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"
            result_item = {
                'file_path': copied_path,
                'filename': Path(file_path).name,
                'status': 'pending',
                'defect': '–û–∂–∏–¥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∞...',
                'eliminating_method': '',
                'analyzed': False
            }
            
            self.analysis_results.append(result_item)
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å—é —Ç–∞–±–ª–∏—Ü—É
        if hasattr(self, 'results_tree'):
            self.populate_results_table()
            
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–Ω–∞–ª–∏–∑–∞
        pending_count = len([r for r in self.analysis_results if not r.get('analyzed', False)])
        total_count = len(self.analysis_results)
        
        self.update_status(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(file_paths)} —Ñ–æ—Ç–æ. –í—Å–µ–≥–æ: {total_count}, –æ–∂–∏–¥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∞: {pending_count}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        self.analyze_next_pending()
        
    def add_result_to_tree(self, result, index):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        if not hasattr(self, 'results_tree'):
            return
            
        status_text = "‚úÖ –ì–æ—Ç–æ–≤–æ" if result.get('analyzed') else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
        if result.get('error'):
            status_text = "‚ùå –û—à–∏–±–∫–∞"
            
        self.results_tree.insert(
            '', 
            tk.END, 
            iid=str(index + 1),
            text=str(index + 1),
            values=(result.get('filename', 'N/A'), status_text, result.get('defect', 'N/A')[:50] + '...' if len(result.get('defect', '')) > 50 else result.get('defect', 'N/A'))
        )
        
    def analyze_next_pending(self):
        """–ê–Ω–∞–ª–∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–∂–∏–¥–∞—é—â–µ–≥–æ —Ñ–∞–π–ª–∞"""
        for i, result in enumerate(self.analysis_results):
            if not result.get('analyzed', False) and result.get('status') == 'pending':
                self.analyze_single_photo(i)
                break
                
    def analyze_single_photo(self, index):
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        if index >= len(self.analysis_results):
            return
            
        result = self.analysis_results[index]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self._analyze_photo_thread, args=(index, result))
        thread.daemon = True
        thread.start()
        
    def _analyze_photo_thread(self, index, result):
        """–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            self.root.after(0, self.update_status, f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {result['filename']}...")
            self.root.after(0, self.progress.start)
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —ç—Ç–∞–ø—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            stages = [
                "–ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...",
                "–û—Ç–ø—Ä–∞–≤–ª—è—é –≤ –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...",
                "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...",
                "–°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ..."
            ]
            
            for i, stage in enumerate(stages):
                self.root.after(0, self.update_status, f"üîç {stage}")
                import time
                time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —ç—Ç–∞–ø–æ–≤
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é AI
            ai_result = analyze_local_photo(result['file_path'])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result.update(ai_result)
            result['analyzed'] = True
            result['status'] = 'completed'
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.file_manager.save_analysis_result(result)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.root.after(0, self._update_ui_after_analysis, index, result)
            
        except Exception as e:
            result['error'] = True
            result['defect'] = f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
            result['status'] = 'error'
            
            self.root.after(0, self._update_ui_after_analysis, index, result)
            
    def _update_ui_after_analysis(self, index, result):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
        self.progress.stop()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if hasattr(self, 'results_tree'):
            self.populate_results_table()
            
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        completed_count = len([r for r in self.analysis_results if r.get('analyzed', False)])
        total_count = len(self.analysis_results)
        
        self.update_status(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {result['filename']} ({completed_count}/{total_count})")
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
        self.analyze_next_pending()
        
    def on_result_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        if not hasattr(self, 'results_tree'):
            return
            
        selection = self.results_tree.selection()
        
        if not selection:
            return
            
        item_id = selection[0]
        
        try:
            index = int(item_id) - 1
            
            if 0 <= index < len(self.analysis_results):
                result = self.analysis_results[index]
                self.show_result_details(result)
            else:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ item_id –Ω–∞–ø—Ä—è–º—É—é
                for i, result in enumerate(self.analysis_results):
                    if str(i + 1) == item_id:
                        self.show_result_details(result)
                        return
        except (ValueError, IndexError):
            pass
            
    def show_result_details(self, result):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º file_path –∏–ª–∏ image_path)
        photo_path = result.get('file_path') or result.get('image_path', '')
        self.show_photo(photo_path)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏
        details = f"""–§–∞–π–ª: {result['filename']}
–ü—É—Ç—å: {photo_path}
–°—Ç–∞—Ç—É—Å: {result.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

–û–ü–ò–°–ê–ù–ò–ï –î–ï–§–ï–ö–¢–ê:
{result.get('defect', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}

–°–ü–û–°–û–ë –£–°–¢–†–ê–ù–ï–ù–ò–Ø:
{result.get('eliminating_method', '–ù–µ —É–∫–∞–∑–∞–Ω')}
"""
        
        if hasattr(self, 'details_text'):
            self.details_text.delete(1.0, tk.END)
            self.details_text.insert(1.0, details)
            
    def show_analysis_details(self, result):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∞–Ω–∞–ª–∏–∑–∞ (–¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º file_path –∏–ª–∏ image_path)
        photo_path = result.get('file_path') or result.get('image_path', '')
        self.show_photo(photo_path)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏
        details = f"""–§–∞–π–ª: {result['filename']}
–ü—É—Ç—å: {photo_path}
–°—Ç–∞—Ç—É—Å: {result.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

–û–ü–ò–°–ê–ù–ò–ï –î–ï–§–ï–ö–¢–ê:
{result.get('defect', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}

–°–ü–û–°–û–ë –£–°–¢–†–ê–ù–ï–ù–ò–Ø:
{result.get('eliminating_method', '–ù–µ —É–∫–∞–∑–∞–Ω')}
"""
        
        if hasattr(self, 'details_text'):
            self.details_text.delete(1.0, tk.END)
            self.details_text.insert(1.0, details)
        
    def show_photo(self, photo_path):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        if not hasattr(self, 'photo_label'):
            return
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not Path(photo_path).exists():
                self.photo_label.configure(text=f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {Path(photo_path).name}")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª HEIC/HEIF
            file_extension = Path(photo_path).suffix.lower()
            
            try:
                if file_extension in ['.heic', '.heif']:
                    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HEIC –¥–ª—è PIL
                    try:
                        from pillow_heif import register_heif_opener
                        register_heif_opener()
                        print(f"‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ HEIC –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ñ–∞–π–ª–∞: {Path(photo_path).name}")
                    except ImportError:
                        # –ï—Å–ª–∏ pillow-heif –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        self.photo_label.configure(text=f"HEIC —Ñ–∞–π–ª: {Path(photo_path).name}\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pillow-heif")
                        return
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image = Image.open(photo_path)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Tkinter)
                if image.mode in ('RGBA', 'LA', 'P'):
                    # –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    background = Image.new('RGB', image.size, (255, 255, 255))
                    if image.mode == 'P':
                        image = image.convert('RGBA')
                    background.paste(image, mask=image.split()[-1] if image.mode == 'RGBA' else None)
                    image = background
                elif image.mode != 'RGB':
                    image = image.convert('RGB')
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤–∏–¥–∂–µ—Ç–∞
                self.photo_label.update()
                max_width = self.photo_label.winfo_width() - 10
                max_height = self.photo_label.winfo_height() - 10
                
                if max_width > 100 and max_height > 100:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∏–¥–∂–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                    image.thumbnail((max_width, max_height), Image.Resampling.LANCZOS)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è Tkinter
                    photo = ImageTk.PhotoImage(image)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º
                    self.photo_label.configure(image=photo, text="")
                    self.photo_label.image = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
                    print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ: {Path(photo_path).name}")
                else:
                    self.photo_label.configure(text=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {Path(photo_path).name}")
                    
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
                print(f"‚ùå {error_msg}")
                self.photo_label.configure(text=error_msg)
                
        except Exception as e:
            error_msg = f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            print(f"‚ùå {error_msg}")
            self.photo_label.configure(text=error_msg)
            
    def export_to_docx(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ Word –¥–æ–∫—É–º–µ–Ω—Ç"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤
            from adapters.unified_report_generator import save_unified_report
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
            defects_data = [r for r in self.analysis_results if r.get('analyzed')]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–Ω–æ—Å–∞
            wear_data = None
            try:
                if hasattr(self, 'wear_calculator') and self.wear_calculator:
                    wear_data = self.wear_calculator.generate_report_data()
            except:
                pass
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
            constructive_data = None
            try:
                if self.file_manager:
                    saved_solutions = self.file_manager.load_constructive_solutions_bundle()
                    if saved_solutions:
                        constructive_data = saved_solutions
            except:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            if not defects_data and not wear_data and not constructive_data:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤, —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–Ω–æ—Å–∞ –∏–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.")
                return
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            file_path = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç",
                defaultextension=".docx",
                filetypes=[("Word –¥–æ–∫—É–º–µ–Ω—Ç—ã", "*.docx"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            )
            
            if file_path:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                self.update_status("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
                self.progress.start()
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
                project_name = self.file_manager.current_project if self.file_manager else "–û–±—â–∏–π –æ–±—ä–µ–∫—Ç"
                object_name = f"–û–±—ä–µ–∫—Ç '{project_name}'"
                address = "–ê–¥—Ä–µ—Å —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
                success = save_unified_report(
                    defects_data=defects_data,
                    wear_data=wear_data,
                    constructive_data=constructive_data,
                    output_path=file_path,
                    object_name=object_name,
                    address=address,
                    project_name=project_name
                )
                
                self.progress.stop()
                
                if success:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –æ—Ç—á–µ—Ç–∞
                    report_parts = []
                    if constructive_data:
                        report_parts.append(f"–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π ({len(constructive_data)} —à—Ç.)")
                    if wear_data:
                        report_parts.append("—Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–Ω–æ—Å–∞")
                    if defects_data:
                        report_parts.append(f"–¥–µ—Ñ–µ–∫—Ç–æ–≤ ({len(defects_data)} —à—Ç.)")
                    
                    content_info = ", ".join(report_parts)
                    
                    # –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
                    pass
                    self.update_status(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {Path(file_path).name}")
                    
                    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
                    if True:
                        try:
                            import subprocess
                            subprocess.run(['open', file_path], check=True)  # macOS
                        except:
                            try:
                                os.startfile(file_path)  # Windows
                            except:
                                # –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
                                pass
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç")
                    self.update_status("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
                    
        except Exception as e:
            self.progress.stop()
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
            self.update_status(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
            print(f"–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()


                

            
    def load_recent_analyses(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞"""
        try:
            recent = self.file_manager.get_recent_analyses(20)
            
            for data in recent:
                analysis = data.get('analysis', {})
                if analysis:
                    self.analysis_results.append(analysis)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            
    def save_project_info(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        try:
            object_name = self.object_name_var.get().strip()
            object_address = self.object_address_var.get().strip()
            object_description = self.object_description_var.get().strip() if hasattr(self, 'object_description_var') else ""
            
            if not object_name:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞
            project_info = {
                'object_name': object_name,
                'object_address': object_address,
                'object_description': object_description,
                'last_updated': datetime.now().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞
            project_file = self.file_manager.get_project_file('project_info.json')
            with open(project_file, 'w', encoding='utf-8') as f:
                json.dump(project_info, f, ensure_ascii=False, indent=2)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º
            self.sync_object_info_to_server(object_name, object_address, object_description)
            
            self.update_status("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {str(e)}")
            self.update_status(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
            
    def load_project_info(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        try:
            project_file = self.file_manager.get_project_file('project_info.json')
            if os.path.exists(project_file):
                with open(project_file, 'r', encoding='utf-8') as f:
                    project_info = json.load(f)
                
                if hasattr(self, 'object_name_var'):
                    self.object_name_var.set(project_info.get('object_name', self.file_manager.current_project))
                if hasattr(self, 'object_address_var'):
                    self.object_address_var.set(project_info.get('object_address', '–ê–¥—Ä–µ—Å —É—Ç–æ—á–Ω—è–µ—Ç—Å—è'))
                if hasattr(self, 'object_description_var'):
                    self.object_description_var.set(project_info.get('object_description', ''))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    for widget in self.content_frame.winfo_children():
                        if isinstance(widget, ttk.LabelFrame) and widget.cget('text') == '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
                            for child in widget.winfo_children():
                                if isinstance(child, ttk.Frame):
                                    for grandchild in child.winfo_children():
                                        if isinstance(grandchild, ttk.Frame):
                                            for text_widget in grandchild.winfo_children():
                                                if isinstance(text_widget, tk.Text):
                                                    text_widget.delete("1.0", tk.END)
                                                    text_widget.insert("1.0", project_info.get('object_description', ''))
                                                    break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ: {e}")
    
    def sync_object_info_to_server(self, name, address, description):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä–µ–∫—Ç–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º"""
        try:
            from adapters.project_api_client import get_project_api_client
            from adapters.auth_client import auth_client
            
            if not auth_client.is_authenticated():
                self.update_status("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return
            
            project_client = get_project_api_client(auth_client)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç
            current_project = self.file_manager.current_project
            
            # –ù–∞—Ö–æ–¥–∏–º ID –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ –∏–º–µ–Ω–∏
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
            projects_result = project_client.get_projects()
            if not projects_result.get('success'):
                self.update_status("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                return
            
            projects = projects_result.get('projects', [])
            project_id = None
            
            # –ù–∞—Ö–æ–¥–∏–º ID –ø—Ä–æ–µ–∫—Ç–∞
            for project in projects:
                if project.get('name') == current_project:
                    project_id = project.get('id')
                    break
            
            if not project_id:
                self.update_status("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
            objects_result = project_client.get_objects_by_project(project_id)
            if not objects_result.get('success'):
                self.update_status("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                return
            
            objects = objects_result.get('objects', [])
            object_id = None
            
            # –ù–∞—Ö–æ–¥–∏–º ID –æ–±—ä–µ–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ (–∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω)
            for obj in objects:
                if obj.get('name') == name:
                    object_id = obj.get('id')
                    break
            
            if object_id:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç
                update_result = project_client.update_object(
                    object_id=object_id,
                    name=name,
                    address=address,
                    description=description
                )
                
                if update_result.get('success'):
                    self.update_status("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
                else:
                    error_msg = update_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    self.update_status(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {error_msg}")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
                create_result = project_client.create_object(
                    project_id=project_id,
                    name=name,
                    address=address,
                    description=description
                )
                
                if create_result.get('success'):
                    self.update_status("–û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
                else:
                    error_msg = create_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    self.update_status(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞: {error_msg}")
                    
        except Exception as e:
            self.update_status(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
    
    def save_project_info_locally(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ (–±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º)"""
        try:
            object_name = self.object_name_var.get().strip()
            object_address = self.object_address_var.get().strip()
            object_description = self.object_description_var.get().strip() if hasattr(self, 'object_description_var') else ""
            
            if not object_name:
                return  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞
            project_info = {
                'object_name': object_name,
                'object_address': object_address,
                'object_description': object_description,
                'last_updated': datetime.now().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞
            project_file = self.file_manager.get_project_file('project_info.json')
            with open(project_file, 'w', encoding='utf-8') as f:
                json.dump(project_info, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ: {e}")
    
    def load_object_info_from_server(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä–µ–∫—Ç–µ —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            from adapters.project_api_client import get_project_api_client
            from adapters.auth_client import auth_client
            
            if not auth_client.is_authenticated():
                return  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞
            
            project_client = get_project_api_client(auth_client)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç
            current_project = self.file_manager.current_project
            
            # –ù–∞—Ö–æ–¥–∏–º ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            projects_result = project_client.get_projects()
            if not projects_result.get('success'):
                return
            
            projects = projects_result.get('projects', [])
            project_id = None
            
            for project in projects:
                if project.get('name') == current_project:
                    project_id = project.get('id')
                    break
            
            if not project_id:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
            objects_result = project_client.get_objects_by_project(project_id)
            if not objects_result.get('success'):
                return
            
            objects = objects_result.get('objects', [])
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç—ã, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π (–∏–ª–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)
            if objects:
                obj = objects[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö
                server_name = obj.get('name', '')
                server_address = obj.get('address', '')
                server_description = obj.get('description', '')
                
                current_name = self.object_name_var.get() if hasattr(self, 'object_name_var') else ''
                current_address = self.object_address_var.get() if hasattr(self, 'object_address_var') else ''
                current_description = self.object_description_var.get() if hasattr(self, 'object_description_var') else ''
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –∏ –Ω–µ –ø—É—Å—Ç—ã–µ
                if server_name and server_name != current_name:
                    self.object_name_var.set(server_name)
                    
                if server_address and server_address != current_address:
                    self.object_address_var.set(server_address)
                    
                if server_description and server_description != current_description:
                    self.object_description_var.set(server_description)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è
                    for widget in self.content_frame.winfo_children():
                        if isinstance(widget, ttk.LabelFrame) and widget.cget('text') == '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
                            for child in widget.winfo_children():
                                if isinstance(child, ttk.Frame):
                                    for grandchild in child.winfo_children():
                                        if isinstance(grandchild, ttk.Frame):
                                            for text_widget in grandchild.winfo_children():
                                                if isinstance(text_widget, tk.Text):
                                                    text_widget.delete("1.0", tk.END)
                                                    text_widget.insert("1.0", server_description)
                                                    break
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ (–±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º)
                if any([server_name != current_name, server_address != current_address, server_description != current_description]):
                    self.save_project_info_locally()
                    
        except Exception as e:
            # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            
    def update_status(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        if not hasattr(self, 'status_label') or self.status_label is None:
            return  # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        from datetime import datetime
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"
        
        self.status_label.configure(text=formatted_message)
        self.root.update_idletasks()
        
    def add_photo(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
            file_paths = filedialog.askopenfilenames(
                title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                filetypes=[
                    ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png *.bmp *.tiff *.heic *.heif"),
                    ("HEIC/HEIF", "*.heic *.heif"),
                    ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
                ]
            )
            
            if file_paths:
                self.update_status(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(file_paths)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
                self.progress.start()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                threading.Thread(
                    target=self._analyze_photos_thread,
                    args=(file_paths,),
                    daemon=True
                ).start()
            else:
                self.update_status("–í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {str(e)}")
            self.update_status(f"–û—à–∏–±–∫–∞: {str(e)}")
            
    def _analyze_photos_thread(self, file_paths):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        try:
            for i, file_path in enumerate(file_paths):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                self.root.after(0, lambda: self.update_status(f"–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ {i+1}/{len(file_paths)}: {Path(file_path).name}"))
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
                result = analyze_local_photo(file_path)
                
                if result:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    self.root.after(0, lambda r=result: self.add_result_to_tree(r, len(self.analysis_results) + 1))
                    self.analysis_results.append(result)
                    
            # –ó–∞–≤–µ—Ä—à–∞–µ–º
            self.root.after(0, lambda: self.progress.stop())
            self.root.after(0, lambda: self.update_status(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(file_paths)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"))
            # –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            pass
            
        except Exception as e:
            self.root.after(0, lambda: self.progress.stop())
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"))
            self.root.after(0, lambda: self.update_status(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"))
            
    def batch_analyze_photos(self):
        """–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
            folder_path = filedialog.askdirectory(
                title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
            )
            
            if folder_path:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ
                image_extensions = {'.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.heic', '.heif'}
                image_files = []
                
                for file_path in Path(folder_path).rglob('*'):
                    if file_path.suffix.lower() in image_extensions:
                        image_files.append(str(file_path))
                
                if image_files:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    count = len(image_files)
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                    if True:
                        self.update_status(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {count} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
                        self.progress.start()
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        threading.Thread(
                            target=self._batch_analyze_thread,
                            args=(image_files,),
                            daemon=True
                        ).start()
                else:
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            else:
                self.update_status("–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            self.update_status(f"–û—à–∏–±–∫–∞: {str(e)}")
            
    def _batch_analyze_thread(self, file_paths):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            results = batch_analyze_photos(file_paths)
            
            if results:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                for i, result in enumerate(results):
                    self.root.after(0, lambda r=result, idx=i: self.add_result_to_tree(r, len(self.analysis_results) + idx + 1))
                    self.analysis_results.append(result)
                
                # –ó–∞–≤–µ—Ä—à–∞–µ–º
                self.root.after(0, lambda: self.progress.stop())
                self.root.after(0, lambda: self.update_status(f"–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"))
                # –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
                pass
            else:
                self.root.after(0, lambda: self.progress.stop())
                self.root.after(0, lambda: self.update_status("–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"))
                
        except Exception as e:
            self.root.after(0, lambda: self.progress.stop())
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"))
            self.root.after(0, lambda: self.update_status(f"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"))
            
    def clear_results(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        if True:
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.analysis_results.clear()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            if hasattr(self, 'results_tree'):
                self.populate_results_table()
            
            # –û—á–∏—â–∞–µ–º –¥–µ—Ç–∞–ª–∏
            if hasattr(self, 'photo_label'):
                self.photo_label.configure(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
            if hasattr(self, 'details_text'):
                self.details_text.delete(1.0, tk.END)
            
            self.update_status("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –æ—á–∏—â–µ–Ω—ã")
            
    def refresh_results(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.load_recent_analyses()
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
            self.populate_results_table()
            
            self.update_status("–°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")
            self.update_status(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
            
    def on_double_click_analyze(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        selection = self.results_tree.selection()
        if selection:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            item = self.results_tree.item(selection[0])
            file_path = item['values'][1]  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if os.path.exists(file_path):
                self.update_status(f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {Path(file_path).name}")
                self.progress.start()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                threading.Thread(
                    target=self._reanalyze_photo_thread,
                    args=(file_path,),
                    daemon=True
                ).start()
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
    # ===== –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º –∏–∑–Ω–æ—Å–∞ =====
    
    def load_wear_template(self, building_type: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ –∑–¥–∞–Ω–∏—è"""
        if not hasattr(self, 'wear_calculator') or self.wear_calculator is None:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–∑–Ω–æ—Å–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
            
        try:
            from adapters.wear_calculator import BuildingTypeTemplates
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            prev_values = {elem.name: elem.wear_percent for elem in self.wear_calculator.elements}
            self._saved_wear_by_template[self._current_template_key] = prev_values

            if building_type == "residential":
                elements = BuildingTypeTemplates.get_residential_building()
                type_name = "–∂–∏–ª–æ–≥–æ –∑–¥–∞–Ω–∏—è"
            elif building_type == "office":
                elements = BuildingTypeTemplates.get_office_building()
                type_name = "–æ—Ñ–∏—Å–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è"
            elif building_type == "industrial":
                elements = BuildingTypeTemplates.get_industrial_building()
                type_name = "–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è"
            else:
                return
                
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            self.wear_calculator.elements = elements
            self._current_template_key = building_type

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑–Ω–æ—Å–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            saved = self._saved_wear_by_template.get(building_type)
            if saved is None:
                # –ï—Å–ª–∏ —Ä–∞–Ω—å—à–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è
                # –∏–∑ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ (prev_values) –ø–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º –∏–º–µ–Ω–∞–º
                saved = prev_values
            for elem in self.wear_calculator.elements:
                if elem.name in saved:
                    try:
                        elem.wear_percent = float(saved.get(elem.name, 0.0))
                    except (TypeError, ValueError):
                        elem.wear_percent = 0.0
                        
            self.update_wear_table()
            self.update_wear_totals()
            
            messagebox.showinfo("–®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω", f"–ó–∞–≥—Ä—É–∂–µ–Ω —à–∞–±–ª–æ–Ω {type_name}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞: {str(e)}")
            
    def load_wear_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏"""
        self.update_wear_table()
        
    def update_wear_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        if not hasattr(self, 'wear_tree') or not hasattr(self, 'wear_calculator') or self.wear_calculator is None:
            return
            
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.wear_tree.delete(*self.wear_tree.get_children())
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        for element in self.wear_calculator.elements:
            self.wear_tree.insert('', tk.END, values=(
                element.name,
                f"{element.weight_percent:.1f}",
                f"{element.wear_percent:.1f}",
                f"{element.weighted_wear:.2f}"
            ))
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        total_weight = sum(elem.weight_percent for elem in self.wear_calculator.elements)
        total_wear = self.wear_calculator.calculate_total_wear()
        
        self.wear_tree.insert('', tk.END, values=(
            "–ò–¢–û–ì–û",
            f"{total_weight:.1f}",
            "-",
            f"{total_wear:.1f}"
        ), tags=('total',))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        self.wear_tree.tag_configure('total', background='lightgray', font=('Segoe UI', 10, 'bold'))
        self.wear_tree.update_idletasks()
        
    def update_wear_totals(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not hasattr(self, 'total_wear_label') or not hasattr(self, 'wear_calculator') or self.wear_calculator is None:
            return
            
        total_wear = self.wear_calculator.calculate_total_wear()
        condition = self.wear_calculator.get_technical_condition(total_wear)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–π–±–ª—ã
        self.total_wear_label.config(text=f"{total_wear}%")
        self.condition_label.config(text=condition["category"])
        
        # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if total_wear <= 20:
            color = "green"
        elif total_wear <= 40:
            color = "orange"
        elif total_wear <= 60:
            color = "red"
        else:
            color = "darkred"
            
        self.total_wear_label.config(foreground=color)
        self.condition_label.config(foreground=color)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.recommendation_text.delete(1.0, tk.END)
        self.recommendation_text.insert(1.0, 
            f"{condition['description']}.\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {condition['recommendation']}."
        )
        
    def edit_wear_value(self, event):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑–Ω–æ—Å–∞ –ø–æ –¥–≤–æ–π–Ω–æ–º—É –∫–ª–∏–∫—É"""
        if not hasattr(self, 'wear_tree') or not hasattr(self, 'wear_calculator') or self.wear_calculator is None:
            return
            
        # –ù–∞—Ö–æ–¥–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        item_id = self.wear_tree.identify_row(event.y)
        if not item_id:
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        self.wear_tree.focus(item_id)
        self.wear_tree.selection_set(item_id)

        values = self.wear_tree.item(item_id, 'values')
        if not values:
            return

        # –ù–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        if values[0] == "–ò–¢–û–ì–û":
            return

        element_name = values[0]
        try:
            current_wear = float(values[2])
        except (ValueError, TypeError):
            current_wear = 0.0

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏ —Ç—Ä–µ—Ç—å–µ–π –∫–æ–ª–æ–Ω–∫–∏ ('wear')
        bbox = self.wear_tree.bbox(item_id, '#3')
        if not bbox:
            return
        x, y, w, h = bbox

        # –°–æ–∑–¥–∞–µ–º Entry –ø–æ–≤–µ—Ä—Ö —è—á–µ–π–∫–∏
        editor_entry = ttk.Entry(self.wear_tree, justify='center')
        editor_entry.place(x=x, y=y, width=w, height=h)
        editor_entry.insert(0, f"{current_wear}")
        editor_entry.focus_set()
        
        # –í—ã–¥–µ–ª—è–µ–º –≤—Å—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        try:
            editor_entry.select_range(0, tk.END)
            editor_entry.icursor(tk.END)
        except Exception:
            pass

        def commit(event=None):
            try:
                text = editor_entry.get().replace(',', '.')
                new_value = float(text)
            except ValueError:
                new_value = current_wear

            new_value = max(0.0, min(100.0, new_value))

            element_name_local = self.wear_tree.item(item_id, 'values')[0]
            updated = self.wear_calculator.update_element_wear(element_name_local, new_value)
            if updated:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
                elem = self.wear_calculator.get_element_by_name(element_name_local)
                if elem:
                    self.wear_tree.item(item_id, values=(
                        elem.name,
                        f"{elem.weight_percent:.1f}",
                        f"{elem.wear_percent:.1f}",
                        f"{elem.weighted_wear:.2f}"
                    ))

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ –º–µ—Ç–∫–∏
                self.update_wear_table()
                self.update_wear_totals()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
                self._saved_wear_by_template[self._current_template_key] = {
                    e.name: e.wear_percent for e in self.wear_calculator.elements
                }

            editor_entry.destroy()

        def cancel(event=None):
            editor_entry.destroy()

        editor_entry.bind('<Return>', commit)
        editor_entry.bind('<KP_Enter>', commit)
        editor_entry.bind('<Escape>', cancel)
        editor_entry.bind('<FocusOut>', commit)
        
    def on_wear_tree_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ –∏–∑–Ω–æ—Å–∞"""
        item_id = self.wear_tree.identify_row(event.y)
        if item_id:
            self.wear_tree.selection_set(item_id)
            self.wear_tree.focus(item_id)
            
    def reset_wear_data(self):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑–Ω–æ—Å–∞"""
        if not hasattr(self, 'wear_calculator') or self.wear_calculator is None:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–∑–Ω–æ—Å–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
            
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑–Ω–æ—Å–∞
        if True:
            self.wear_calculator.reset_all_wear()
            self.update_wear_table()
            self.update_wear_totals()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
            self._saved_wear_by_template[self._current_template_key] = {
                elem.name: elem.wear_percent for elem in self.wear_calculator.elements
            }
            
    def export_wear_to_word(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–Ω–æ—Å–∞ –≤ Word"""
        if not hasattr(self, 'wear_calculator') or self.wear_calculator is None:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏–∑–Ω–æ—Å–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
            
        try:
            from adapters.unified_report_generator import generate_wear_report
            
            file_path = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∏–∑–Ω–æ—Å—É",
                defaultextension=".docx",
                filetypes=[("Word –¥–æ–∫—É–º–µ–Ω—Ç—ã", "*.docx"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            )
            
            if file_path:
                report_data = self.wear_calculator.generate_report_data()
                success = generate_wear_report(report_data, file_path)
                
                if success:
                    messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:\n{file_path}")
                    
                    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
                    if True:
                        try:
                            import subprocess
                            subprocess.run(['open', file_path], check=True)  # macOS
                        except:
                            try:
                                import os
                                os.startfile(file_path)  # Windows
                            except:
                                pass
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç")
                    
        except ImportError:
            messagebox.showwarning("–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", "–ú–æ–¥—É–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Word –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
                
    # ===== –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏ =====
    
    def _enable_select_all(self, widget: ttk.Combobox):
        """–í–∫–ª—é—á–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ"""
        def select_all(event=None):
            try:
                widget.select_range(0, tk.END)
                widget.icursor(tk.END)
            except Exception:
                pass
        widget.bind('<FocusIn>', select_all)
        widget.bind('<Double-Button-1>', select_all)

    def _is_leaf(self, value: Any) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–º –¥–µ—Ä–µ–≤–∞"""
        return isinstance(value, str)

    def _collect_label_text_pairs(self, subtree: Any, path: Optional[List[str]] = None) -> List[Tuple[str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä—ã (–∫—Ä–∞—Ç–∫–∞—è_–º–µ—Ç–∫–∞, –ø–æ–ª–Ω—ã–π_—Ç–µ–∫—Å—Ç) –¥–ª—è –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–µ–≤–∞"""
        if path is None:
            path = []
        pairs: List[Tuple[str, str]] = []
        if isinstance(subtree, str):
            label = " / ".join([p for p in path if p]) or subtree[:40]
            pairs.append((label, subtree))
        elif isinstance(subtree, dict):
            for k, v in subtree.items():
                if k == "__custom__":
                    continue
                pairs.extend(self._collect_label_text_pairs(v, path + [k]))
        return pairs

    def _on_construction_element_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
        sel = self.element_combo.get().strip()
        self._desc_label_to_text.clear()
        values: List[str] = []
        if sel and sel in self.CONSTRUCTION_TREE:
            pairs = self._collect_label_text_pairs(self.CONSTRUCTION_TREE[sel], [])
            for label, text in pairs:
                # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏
                if label not in self._desc_label_to_text:
                    self._desc_label_to_text[label] = text
            values = list(self._desc_label_to_text.keys())
        values.sort()
        self.desc_combo.configure(values=values)

    def _get_construction_editor_values(self) -> Tuple[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
        element = self.element_combo.get().strip()
        desc_label_or_text = self.desc_combo.get().strip()
        return element, desc_label_or_text

    def _add_construction_row(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""
        element, desc = self._get_construction_editor_values()
        if not element:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é")
            return
        if not desc:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
            return
        # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É (–¥—É–±–ª–∏–∫–∞—Ç—ã –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è)
        self.construction_tree.insert('', tk.END, values=(element, desc))

    def _delete_construction_row(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        for iid in self.construction_tree.selection():
            self.construction_tree.delete(iid)

    def _clear_construction_all(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""
        self.construction_tree.delete(*self.construction_tree.get_children())

    def _on_construction_row_select(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        sel = self.construction_tree.selection()
        if not sel:
            return
        vals = self.construction_tree.item(sel[0], 'values')
        if not vals:
            return
        element, desc = vals[0], vals[1]
        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä. –û–±–∞ –ø–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ
        self.element_combo.set(element)
        self._on_construction_element_change()
        self.desc_combo.set(desc)

    def _label_to_full_text(self, category: str, label_or_text: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ –º–µ—Ç–∫–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            subtree = self.CONSTRUCTION_TREE.get(category)
            if not isinstance(subtree, dict):
                return label_or_text
            pairs = self._collect_label_text_pairs(subtree, [])
            for lbl, text in pairs:
                if lbl == label_or_text:
                    return text
            return label_or_text
        except Exception:
            return label_or_text

    def _save_construction_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""
        items = []
        for iid in self.construction_tree.get_children():
            vals = self.construction_tree.item(iid, 'values')
            if not vals:
                continue
            category = str(vals[0]).strip()
            desc_value = str(vals[1]).strip()
            full_text = self._label_to_full_text(category, desc_value)
            items.append({'category': category, 'text': full_text})

        if not items:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É")
            return

        saved_ok = True
        # –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        try:
            if self.file_manager and hasattr(self.file_manager, 'save_constructive_solutions_bundle'):
                self.file_manager.save_constructive_solutions_bundle(items)
            elif self.file_manager and hasattr(self.file_manager, 'save_constructive_solution'):
                for it in items:
                    self.file_manager.save_constructive_solution(it)
        except Exception as e:
            saved_ok = False
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")

        self.construction_data = items
        if saved_ok:
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            self.update_status("–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

    def _cancel_construction_edits(self):
        """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""
        # –ü—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
        self.element_combo.set("")
        self.desc_combo.set("")

    def _show_quick_solutions(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""
        try:
            if not self.PREDEFINED_SOLUTIONS:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ—à–µ–Ω–∏–π")
                return
                
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞
            quick_dialog = tk.Toplevel(self.root)
            quick_dialog.title("–ë—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è")
            quick_dialog.geometry("600x400")
            quick_dialog.transient(self.root)
            quick_dialog.grab_set()
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            ttk.Label(
                quick_dialog,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
                font=("Segoe UI", 12, "bold"),
            ).pack(padx=20, pady=(15, 10), anchor=tk.W)
            
            # –°–ø–∏—Å–æ–∫ —Ä–µ—à–µ–Ω–∏–π
            listbox_frame = ttk.Frame(quick_dialog)
            listbox_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
            listbox = tk.Listbox(listbox_frame, selectmode=tk.MULTIPLE)
            scrollbar = ttk.Scrollbar(listbox_frame, orient=tk.VERTICAL, command=listbox.yview)
            listbox.configure(yscrollcommand=scrollbar.set)
            
            listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫
            for solution_name in self.PREDEFINED_SOLUTIONS.keys():
                listbox.insert(tk.END, solution_name)
            
            # –ö–Ω–æ–ø–∫–∏
            button_frame = ttk.Frame(quick_dialog)
            button_frame.pack(fill=tk.X, padx=20, pady=10)
            
            def add_selected():
                selected_indices = listbox.curselection()
                if not selected_indices:
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ä–µ—à–µ–Ω–∏–µ")
                    return
                    
                added_count = 0
                for index in selected_indices:
                    solution_name = listbox.get(index)
                    solution_data = self.PREDEFINED_SOLUTIONS[solution_name]
                    description = solution_data.get('–æ–ø–∏—Å–∞–Ω–∏–µ', solution_name)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
                    self.construction_tree.insert('', tk.END, values=(solution_name, description))
                    added_count += 1
                
                quick_dialog.destroy()
                messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} —Ä–µ—à–µ–Ω–∏–π")
            
            def show_details():
                selected_indices = listbox.curselection()
                if not selected_indices:
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
                    return
                    
                index = selected_indices[0]
                solution_name = listbox.get(index)
                solution_data = self.PREDEFINED_SOLUTIONS[solution_name]
                
                details_text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {solution_name}\n\n"
                details_text += f"–¢–∏–ø: {solution_data.get('—Ç–∏–ø', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                details_text += f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {solution_data.get('–º–∞—Ç–µ—Ä–∏–∞–ª', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                details_text += f"–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: {solution_data.get('–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                
                if solution_data.get('–æ—Å–Ω–æ–≤–∞–Ω–∏–µ_–∏_–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞'):
                    details_text += f"–û—Å–Ω–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞: {solution_data['–æ—Å–Ω–æ–≤–∞–Ω–∏–µ_–∏_–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞']}\n"
                if solution_data.get('–∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ'):
                    details_text += f"–ê—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ: {solution_data['–∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ']}\n"
                if solution_data.get('–≥–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è_–∏_–∑–∞—â–∏—Ç–∞'):
                    details_text += f"–ì–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è –∏ –∑–∞—â–∏—Ç–∞: {solution_data['–≥–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è_–∏_–∑–∞—â–∏—Ç–∞']}\n"
                if solution_data.get('—É–∑–ª—ã_–∏_–∑–∞–∫–ª–∞–¥–Ω—ã–µ'):
                    details_text += f"–£–∑–ª—ã –∏ –∑–∞–∫–ª–∞–¥–Ω—ã–µ: {solution_data['—É–∑–ª—ã_–∏_–∑–∞–∫–ª–∞–¥–Ω—ã–µ']}\n"
                if solution_data.get('–ø—Ä–æ—á–µ–µ'):
                    details_text += f"–ü—Ä–æ—á–µ–µ: {solution_data['–ø—Ä–æ—á–µ–µ']}\n"
                
                details_text += f"\n–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{solution_data.get('–æ–ø–∏—Å–∞–Ω–∏–µ', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ
                details_window = tk.Toplevel(quick_dialog)
                details_window.title(f"–î–µ—Ç–∞–ª–∏: {solution_name}")
                details_window.geometry("500x400")
                details_window.transient(quick_dialog)
                
                text_widget = tk.Text(details_window, wrap=tk.WORD, padx=10, pady=10)
                text_widget.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
                text_widget.insert(tk.END, details_text)
                text_widget.config(state=tk.DISABLED)
                
                ttk.Button(details_window, text="–ó–∞–∫—Ä—ã—Ç—å", command=details_window.destroy).pack(pady=10)
            
            ttk.Button(button_frame, text="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏", command=show_details).pack(side=tk.LEFT)
            ttk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", command=quick_dialog.destroy).pack(side=tk.RIGHT)
            ttk.Button(button_frame, text="–î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", command=add_selected).pack(side=tk.RIGHT, padx=(0, 10))
            
            # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
            try:
                self.root.update_idletasks()
                x = self.root.winfo_x() + (self.root.winfo_width() // 2) - 300
                y = self.root.winfo_y() + (self.root.winfo_height() // 2) - 200
                quick_dialog.geometry(f"+{x}+{y}")
            except Exception:
                pass
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è: {e}")

    def _load_construction_json_data(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏–∑ JSON"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
            file_path = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ JSON —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π",
                filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
            )
            
            if not file_path:
                return
                
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, 'r', encoding='utf-8') as f:
                json_data = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
            if isinstance(json_data, dict) and 'solutions' in json_data:
                # –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                solutions = json_data.get('solutions', [])
                if solutions:
                    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                    self.construction_tree.delete(*self.construction_tree.get_children())
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    for item in solutions:
                        if isinstance(item, dict):
                            category = item.get('category', '')
                            text = item.get('text', '')
                            if category and text:
                                self.construction_tree.insert('', tk.END, values=(category, text))
                    
                    messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(solutions)} —Ä–µ—à–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞")
                else:
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π")
            else:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
                try:
                    from adapters.construction_data import load_construction_data_from_json, merge_construction_data
                    new_solutions = load_construction_data_from_json(json_data)
                    
                    if not new_solutions:
                        messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞")
                        return
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    self.PREDEFINED_SOLUTIONS = merge_construction_data(self.PREDEFINED_SOLUTIONS, new_solutions)
                    
                    messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(new_solutions)} –Ω–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π")
                except Exception:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
            
        except json.JSONDecodeError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞: {e}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")

    def _load_saved_construction_data_silent(self):
        """–¢–∏—Ö–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""
        if not self.file_manager:
            return
            
        try:
            saved_data = self.file_manager.load_constructive_solutions_bundle()
            if saved_data:
                for item in saved_data:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                    if isinstance(item, dict):
                        category = item.get('category', '')
                        text = item.get('text', '')
                        if category and text:
                            self.construction_tree.insert('', tk.END, values=(category, text))
                
                if saved_data:
                    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(saved_data)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")

    def _load_saved_construction_data(self):
        """–†—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.file_manager:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–§–∞–π–ª-–º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        try:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            self.construction_tree.delete(*self.construction_tree.get_children())
            
            saved_data = self.file_manager.load_constructive_solutions_bundle()
            if saved_data:
                for item in saved_data:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                    if isinstance(item, dict):
                        category = item.get('category', '')
                        text = item.get('text', '')
                        if category and text:
                            self.construction_tree.insert('', tk.END, values=(category, text))
                
                messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(saved_data)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π")
            else:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")

    def _export_construction_to_json(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
        try:
            from datetime import datetime
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            items = []
            for iid in self.construction_tree.get_children():
                vals = self.construction_tree.item(iid, 'values')
                if not vals:
                    continue
                category = str(vals[0]).strip()
                desc_value = str(vals[1]).strip()
                if category and desc_value:
                    items.append({'category': category, 'text': desc_value})
            
            if not items:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            file_path = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
                defaultextension=".json",
                filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
            )
            
            if not file_path:
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_data = {
                "timestamp": datetime.now().isoformat(),
                "project": self.file_manager.current_project if self.file_manager else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç",
                "solutions": items
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, ensure_ascii=False, indent=2)
            
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(items)} —Ä–µ—à–µ–Ω–∏–π –≤ —Ñ–∞–π–ª:\n{file_path}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
                
    def _reanalyze_photo_thread(self, file_path):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
            result = analyze_local_photo(file_path)
            
            if result:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                self.root.after(0, lambda: self.update_status(f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {Path(file_path).name}"))
                self.root.after(0, lambda: self.progress.stop())
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π
                self.root.after(0, lambda: self.show_analysis_details(result))
            else:
                self.root.after(0, lambda: self.progress.stop())
                self.root.after(0, lambda: self.update_status("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"))
                
        except Exception as e:
            self.root.after(0, lambda: self.progress.stop())
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"))
            self.root.after(0, lambda: self.update_status(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"))
        
    def create_plans_section(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞ –ø–ª–∞–Ω–æ–≤"""
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–ª–∞–Ω–æ–≤
        plans_frame = ttk.Frame(parent)
        plans_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –ì–ª–∞–≤–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–ª–µ–≤–∞—è –∏ –ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª–∏)
        main_paned = ttk.PanedWindow(plans_frame, orient=tk.HORIZONTAL)
        main_paned.pack(fill=tk.BOTH, expand=True)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤ –∏ –¥–µ—Ç–∞–ª–∏
        left_panel = ttk.Frame(main_paned)
        main_paned.add(left_panel, weight=1)
        
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ (—Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤ –∏ –¥–µ—Ç–∞–ª–∏)
        left_paned = ttk.PanedWindow(left_panel, orient=tk.VERTICAL)
        left_paned.pack(fill=tk.BOTH, expand=True)
        
        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ - —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤
        list_section = ttk.LabelFrame(left_paned, text="–°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤", padding=10)
        left_paned.add(list_section, weight=1)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ttk.Frame(list_section)
        buttons_frame.pack(fill=tk.X, pady=(0, 10))
        
        add_plan_button = ttk.Button(
            buttons_frame,
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω",
            style='Modern.TButton',
            command=self.add_new_plan
        )
        add_plan_button.pack(side=tk.LEFT, padx=(0, 5))
        
        delete_plan_button = ttk.Button(
            buttons_frame,
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
            style='Secondary.TButton',
            command=self.delete_selected_plan
        )
        delete_plan_button.pack(side=tk.LEFT, padx=(0, 5))
        
        refresh_plans_button = ttk.Button(
            buttons_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            style='Secondary.TButton',
            command=self.load_plans
        )
        refresh_plans_button.pack(side=tk.LEFT)
        
        # –°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤
        list_frame = ttk.Frame(list_section)
        list_frame.pack(fill=tk.BOTH, expand=True)
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–ª–∞–Ω–æ–≤
        self.plans_tree = ttk.Treeview(list_frame, columns=('name',), show='headings', height=6)
        self.plans_tree.heading('name', text='–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞')
        self.plans_tree.column('name', width=250)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞
        plans_scrollbar = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.plans_tree.yview)
        self.plans_tree.configure(yscrollcommand=plans_scrollbar.set)
        
        self.plans_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        plans_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—ã–±–æ—Ä–∞
        self.plans_tree.bind('<<TreeviewSelect>>', self.on_plan_select)
        
        # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ - –¥–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞
        details_section = ttk.LabelFrame(left_paned, text="–î–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞", padding=10)
        left_paned.add(details_section, weight=2)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –ø–ª–∞–Ω–∞
        self.plan_details_frame = ttk.Frame(details_section)
        self.plan_details_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
        right_panel = ttk.Frame(main_paned)
        main_paned.add(right_panel, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_header = ttk.Label(right_panel, text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞", style='Subtitle.TLabel')
        image_header.pack(pady=(0, 10))
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–∞–Ω–∞
        image_frame = ttk.LabelFrame(right_panel, text="–ü—Ä–µ–≤—å—é", padding=10)
        image_frame.pack(fill=tk.BOTH, expand=True)
        
        # –§—Ä–µ–π–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.plan_image_frame = ttk.Frame(image_frame)
        self.plan_image_frame.pack(fill=tk.BOTH, expand=True)
        
        # –°–æ–∑–¥–∞–µ–º –ª–µ–π–±–ª –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.plan_image_label = ttk.Label(
            self.plan_image_frame, 
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            anchor='center',
            font=('Segoe UI', 10),
            foreground='gray'
        )
        self.plan_image_label.pack(fill=tk.BOTH, expand=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        self.setup_paned_styles(main_paned, left_paned)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.root.after(100, lambda: self.setup_paned_proportions(main_paned, left_paned))
        
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞–Ω–æ–≤
        self.current_plan = None
        self.plans_data = []
        self.current_plan_image = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω—ã
        self.load_plans()
    
    def setup_paned_styles(self, main_paned, left_paned):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π"""
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
            style = ttk.Style()
            
            # –°—Ç–∏–ª—å –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è (–æ—Å–Ω–æ–≤–Ω–æ–π)
            style.configure('Horizontal.TPanedwindow', 
                           background='#f0f0f0',
                           sashwidth=6,
                           sashpad=2)
            
            # –°—Ç–∏–ª—å –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
            style.configure('Vertical.TPanedwindow', 
                           background='#f0f0f0',
                           sashwidth=6,
                           sashpad=2)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
            main_paned.configure(style='Horizontal.TPanedwindow')
            left_paned.configure(style='Vertical.TPanedwindow')
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–µ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π: {e}")
    
    def setup_paned_proportions(self, main_paned, left_paned):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–ø–æ—Ä—Ü–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —à–∏—Ä–∏–Ω—É –æ–∫–Ω–∞
            main_paned.update_idletasks()
            total_width = main_paned.winfo_width()
            
            if total_width > 0:
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–ª–µ–≤–∞—è –ø–∞–Ω–µ–ª—å : –ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å = 60% : 40%)
                left_width = int(total_width * 0.6)
                main_paned.sash_place(0, left_width, 0)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
            left_paned.update_idletasks()
            left_height = left_paned.winfo_height()
            
            if left_height > 0:
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (—Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤ : –¥–µ—Ç–∞–ª–∏ = 40% : 60%)
                list_height = int(left_height * 0.4)
                left_paned.sash_place(0, 0, list_height)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π: {e}")
    
    
    def display_plan_image(self, image):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–∞–Ω–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ—Ä–µ–π–º–∞
            self.plan_image_frame.update_idletasks()
            frame_width = self.plan_image_frame.winfo_width()
            frame_height = self.plan_image_frame.winfo_height()
            
            if frame_width <= 1 or frame_height <= 1:
                # –ï—Å–ª–∏ —Ñ—Ä–µ–π–º –µ—â–µ –Ω–µ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                frame_width, frame_height = 400, 300
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            img_width, img_height = image.size
            aspect_ratio = img_width / img_height
            
            if aspect_ratio > frame_width / frame_height:
                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∏—Ä–µ
                display_width = min(frame_width - 20, img_width)
                display_height = int(display_width / aspect_ratio)
            else:
                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—à–µ
                display_height = min(frame_height - 20, img_height)
                display_width = int(display_height * aspect_ratio)
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            resized_image = image.resize((display_width, display_height), Image.Resampling.LANCZOS)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PhotoImage –¥–ª—è tkinter
            photo = ImageTk.PhotoImage(resized_image)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–π–±–ª
            self.plan_image_label.configure(image=photo, text="")
            self.plan_image_label.image = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            self.plan_image_label.configure(
                image="", 
                text=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n{str(e)}",
                foreground='red'
            )
    
    
    def load_plan_image(self, plan_id):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            # –ò—â–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            plans_images_dir = self.file_manager.get_project_file('plans_images')
            
            if not plans_images_dir.exists():
                return None
            
            # –ò—â–µ–º —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
            image_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.gif', '.tiff']
            for ext in image_extensions:
                image_path = plans_images_dir / f"plan_{plan_id}{ext}"
                if image_path.exists():
                    return str(image_path)
            
            return None
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–∞–Ω–∞: {e}")
            return None
    
    def load_plans(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–ª–∞–Ω–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            print("DEBUG: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–ª–∞–Ω–æ–≤...")
            from adapters.plans_api_client import get_plans_api_client
            from adapters.auth_client import auth_client
            
            if not auth_client.is_authenticated():
                print("DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                self.update_status("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–∞–º–∏")
                return
            
            print("DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞
            object_id = self.get_current_object_id()
            print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω object_id: {object_id}")
            if not object_id:
                print("DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å object_id")
                self.update_status("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –æ–±—ä–µ–∫—Ç–∞")
                return
            
            plans_client = get_plans_api_client(auth_client)
            print(f"DEBUG: –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–ª–∞–Ω–æ–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id}")
            result = plans_client.get_plans_by_object(object_id)
            print(f"DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: {result}")
            
            if result.get('success'):
                self.plans_data = result.get('plans', [])
                print(f"DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–ª–∞–Ω–æ–≤: {len(self.plans_data)}")
                print(f"DEBUG: –î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–æ–≤: {self.plans_data}")
                self.update_plans_list()
                self.update_status(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.plans_data)} –ø–ª–∞–Ω–æ–≤")
            else:
                print(f"DEBUG: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–æ–≤: {result.get('error')}")
                self.update_status(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–æ–≤: {result.get('error')}")
                
        except Exception as e:
            print(f"DEBUG: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–æ–≤: {str(e)}")
            import traceback
            traceback.print_exc()
            self.update_status(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–æ–≤: {str(e)}")
    
    def get_current_object_id(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞"""
        try:
            print("DEBUG: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ object_id...")
            from adapters.project_api_client import get_project_api_client
            from adapters.auth_client import auth_client
            
            if not auth_client.is_authenticated():
                print("DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ get_current_object_id")
                return None
            
            project_client = get_project_api_client(auth_client)
            current_object_name = self.file_manager.current_project  # –≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
            print(f"DEBUG: –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç: {current_object_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
            projects_result = project_client.get_projects()
            print(f"DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {projects_result}")
            if not projects_result.get('success'):
                print("DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã")
                return None
            
            projects = projects_result.get('projects', [])
            print(f"DEBUG: –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
            
            # –ò—â–µ–º –æ–±—ä–µ–∫—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤–æ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö
            for project in projects:
                project_id = project.get('id')
                project_name = project.get('name')
                print(f"DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç {project_name} (ID: {project_id})")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
                objects_result = project_client.get_objects_by_project(project_id)
                if objects_result.get('success'):
                    objects = objects_result.get('objects', [])
                    print(f"DEBUG: –í –ø—Ä–æ–µ–∫—Ç–µ {project_name} –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects)}")
                    
                    # –ò—â–µ–º –æ–±—ä–µ–∫—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                    for obj in objects:
                        obj_name = obj.get('name')
                        obj_id = obj.get('id')
                        print(f"DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–∫—Ç '{obj_name}' (ID: {obj_id})")
                        if obj_name == current_object_name:
                            print(f"DEBUG: –ù–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç '{current_object_name}' —Å ID: {obj_id}")
                            return obj_id
                else:
                    print(f"DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ {project_name}")
            
            print(f"DEBUG: –û–±—ä–µ–∫—Ç '{current_object_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ")
            
            # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –≤ –ø–µ—Ä–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ
            if projects:
                first_project = projects[0]
                project_id = first_project.get('id')
                project_name = first_project.get('name')
                print(f"DEBUG: –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç '{current_object_name}' –≤ –ø—Ä–æ–µ–∫—Ç–µ '{project_name}' (ID: {project_id})")
                
                current_name = self.object_name_var.get() if hasattr(self, 'object_name_var') else current_object_name
                current_address = self.object_address_var.get() if hasattr(self, 'object_address_var') else ''
                current_description = self.object_description_var.get() if hasattr(self, 'object_description_var') else ''
                
                print(f"DEBUG: –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏: name={current_name}, address={current_address}")
                create_result = project_client.create_object(
                    project_id=project_id,
                    name=current_name,
                    address=current_address,
                    description=current_description
                )
                print(f"DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞: {create_result}")
                
                if create_result.get('success'):
                    new_object_id = create_result.get('object', {}).get('id')
                    print(f"DEBUG: –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å ID: {new_object_id}")
                    return new_object_id
            
            print("DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç")
            return None
            
        except Exception as e:
            print(f"DEBUG: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ get_current_object_id: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def update_plans_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–ª–∞–Ω–æ–≤ –≤ Treeview"""
        print(f"DEBUG: –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(self.plans_data)}")
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        for item in self.plans_tree.get_children():
            self.plans_tree.delete(item)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω—ã
        for plan in self.plans_data:
            print(f"DEBUG: –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω –≤ —Å–ø–∏—Å–æ–∫: {plan}")
            self.plans_tree.insert('', 'end', 
                                 iid=plan.get('id'),
                                 values=(plan.get('name', ''),))
        
        print(f"DEBUG: –°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω, —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ TreeView: {len(self.plans_tree.get_children())}")
    
    def on_plan_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ"""
        selection = self.plans_tree.selection()
        if not selection:
            return
        
        plan_id = int(selection[0])
        self.current_plan = next((p for p in self.plans_data if p.get('id') == plan_id), None)
        
        if self.current_plan:
            self.show_plan_details()
            self.load_and_display_plan_image()
    
    def load_and_display_plan_image(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–∞–Ω–∞"""
        if not self.current_plan:
            return
            
        try:
            plan_id = self.current_plan.get('id')
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            local_image_path = self.load_plan_image(plan_id)
            if local_image_path:
                image = Image.open(local_image_path)
                self.display_plan_image(image)
                return
            
            # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
            image_url = self.current_plan.get('image_url')
            if image_url:
                import urllib.request
                import ssl
                
                # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
                ssl_context = ssl.create_default_context()
                ssl_context.check_hostname = False
                ssl_context.verify_mode = ssl.CERT_NONE
                
                # –°–æ–∑–¥–∞–µ–º opener —Å SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                opener = urllib.request.build_opener(urllib.request.HTTPSHandler(context=ssl_context))
                urllib.request.install_opener(opener)
                
                with urllib.request.urlopen(image_url) as url:
                    img_data = url.read()
                
                image = Image.open(io.BytesIO(img_data))
                self.display_plan_image(image)
                return
            
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            self.plan_image_label.configure(
                image="", 
                text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                foreground='gray'
            )
            self.plan_image_label.image = None
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–∞–Ω–∞: {e}")
            self.plan_image_label.configure(
                image="", 
                text=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n{str(e)}",
                foreground='red'
            )
            self.plan_image_label.image = None
    
    def show_plan_details(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
        # –û—á–∏—â–∞–µ–º –ø–∞–Ω–µ–ª—å –¥–µ—Ç–∞–ª–µ–π
        for widget in self.plan_details_frame.winfo_children():
            widget.destroy()
        
        if not self.current_plan:
            return
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–µ
        info_frame = ttk.LabelFrame(self.plan_details_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–µ", padding=15)
        info_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
        name_frame = ttk.Frame(info_frame)
        name_frame.pack(fill=tk.X, pady=(0, 10))
        
        name_label = ttk.Label(name_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ:", style='Subtitle.TLabel')
        name_label.pack(side=tk.LEFT, padx=(0, 10))
        
        self.plan_name_var = tk.StringVar(value=self.current_plan.get('name', ''))
        name_entry = ttk.Entry(name_frame, textvariable=self.plan_name_var, width=40, font=('Segoe UI', 11))
        name_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
        desc_frame = ttk.Frame(info_frame)
        desc_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        desc_label = ttk.Label(desc_frame, text="–û–ø–∏—Å–∞–Ω–∏–µ:", style='Subtitle.TLabel')
        desc_label.pack(anchor='nw', pady=(0, 5))
        
        self.plan_description_var = tk.StringVar(value=self.current_plan.get('description', ''))
        desc_text = tk.Text(desc_frame, height=6, width=40, font=('Segoe UI', 11), wrap=tk.WORD)
        desc_text.pack(fill=tk.BOTH, expand=True)
        desc_text.insert("1.0", self.plan_description_var.get())
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        def on_desc_change(event=None):
            self.plan_description_var.set(desc_text.get("1.0", tk.END).strip())
        
        desc_text.bind('<KeyRelease>', on_desc_change)
        desc_text.bind('<FocusOut>', on_desc_change)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        save_button = ttk.Button(
            info_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
            style='Modern.TButton',
            command=self.save_plan_changes
        )
        save_button.pack(pady=(10, 0))
    
    def add_new_plan(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞"""
        try:
            from tkinter import filedialog
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            file_path = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞",
                filetypes=[
                    ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png *.bmp *.gif"),
                    ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
                ]
            )
            
            if not file_path:
                return
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
            dialog = PlanDialog(self.root, "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω")
            if dialog.result is None:
                return
            
            name, description = dialog.result
            
            if not name.strip():
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            from adapters.plans_api_client import get_plans_api_client
            from adapters.auth_client import auth_client
            
            if not auth_client.is_authenticated():
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                return
            
            plans_client = get_plans_api_client(auth_client)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ GCP
            upload_result = plans_client.upload_image(file_path)
            if not upload_result.get('success'):
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {upload_result.get('error')}")
                return
            
            image_name = upload_result.get('image_name')
            
            # –ü–æ–ª—É—á–∞–µ–º ID –æ–±—ä–µ–∫—Ç–∞
            object_id = self.get_current_object_id()
            if not object_id:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –æ–±—ä–µ–∫—Ç–∞")
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω
            create_result = plans_client.create_plan(
                object_id=object_id,
                name=name,
                description=description,
                image_name=image_name
            )
            
            if create_result.get('success'):
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                self.load_plans()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤
                self.update_status("–ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω: {create_result.get('error')}")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞: {str(e)}")
    
    def delete_selected_plan(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
        if not self.current_plan:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω '{self.current_plan.get('name')}'?"):
            return
        
        try:
            from adapters.plans_api_client import get_plans_api_client
            from adapters.auth_client import auth_client
            
            if not auth_client.is_authenticated():
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                return
            
            plans_client = get_plans_api_client(auth_client)
            
            delete_result = plans_client.delete_plan(self.current_plan.get('id'))
            
            if delete_result.get('success'):
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                self.current_plan = None
                self.load_plans()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤
                self.update_status("–ü–ª–∞–Ω —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω: {delete_result.get('error')}")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞: {str(e)}")
    
    def save_plan_changes(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–ª–∞–Ω–∞"""
        if not self.current_plan:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        try:
            from adapters.plans_api_client import get_plans_api_client
            from adapters.auth_client import auth_client
            
            if not auth_client.is_authenticated():
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                return
            
            plans_client = get_plans_api_client(auth_client)
            
            name = self.plan_name_var.get().strip()
            description = self.plan_description_var.get().strip()
            
            if not name:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return
            
            update_result = plans_client.update_plan(
                plan_id=self.current_plan.get('id'),
                name=name,
                description=description
            )
            
            if update_result.get('success'):
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                self.load_plans()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤
                self.update_status("–ü–ª–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω: {update_result.get('error')}")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞: {str(e)}")

    def logout(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã?"):
            try:
                from adapters.auth_client import auth_client
                auth_client.logout()
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ
                self.root.destroy()
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É –æ–∫–Ω—É
                from ui.welcome_window import WelcomeWindow
                welcome = WelcomeWindow()
                welcome.run()
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã: {str(e)}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()


if __name__ == "__main__":
    app = ModernDefectAnalyzerWindow()
    app.run()
