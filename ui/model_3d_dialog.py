"""
–î–∏–∞–ª–æ–≥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ 3D –º–æ–¥–µ–ª–µ–π
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import threading
from pathlib import Path
import json
from typing import Optional, Dict

try:
    from ..adapters.model_3d_analyzer import Model3DAnalyzer, install_3d_dependencies
    HAS_3D_MODULE = True
except ImportError:
    HAS_3D_MODULE = False


class Model3DDialog:
    """–î–∏–∞–ª–æ–≥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 3D –º–æ–¥–µ–ª—è–º–∏"""
    
    def __init__(self, parent, file_manager):
        self.parent = parent
        self.file_manager = file_manager
        self.analyzer = None
        self.current_analysis = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å 3D –º–æ–¥—É–ª—è
        if not HAS_3D_MODULE:
            self.show_install_dependencies_dialog()
            return
        
        try:
            self.analyzer = Model3DAnalyzer()
        except ImportError as e:
            self.show_install_dependencies_dialog()
            return
        
        self.create_dialog()
    
    def show_install_dependencies_dialog(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        result = messagebox.askyesno(
            "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
            "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å 3D –º–æ–¥–µ–ª—è–º–∏ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:\n\n"
            "‚Ä¢ trimesh[easy] - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 3D –º–µ—à–∞–º–∏\n"
            "‚Ä¢ pygltflib - –¥–ª—è GLB/GLTF —Ñ–∞–π–ª–æ–≤\n"
            "‚Ä¢ numpy - –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\n\n"
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å? (–ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ä–µ–º—è)"
        )
        
        if result:
            self.install_dependencies()
    
    def install_dependencies(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        progress_window = tk.Toplevel(self.parent)
        progress_window.title("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        progress_window.geometry("400x150")
        progress_window.transient(self.parent)
        progress_window.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        progress_window.geometry("+%d+%d" % (
            self.parent.winfo_rootx() + 50,
            self.parent.winfo_rooty() + 50
        ))
        
        # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        ttk.Label(progress_window, text="–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è 3D –∞–Ω–∞–ª–∏–∑–∞...").pack(pady=20)
        
        progress_bar = ttk.Progressbar(progress_window, mode='indeterminate')
        progress_bar.pack(pady=10, padx=20, fill=tk.X)
        progress_bar.start()
        
        status_label = ttk.Label(progress_window, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∂–¥–∏—Ç–µ...")
        status_label.pack(pady=10)
        
        def install_worker():
            try:
                success = install_3d_dependencies()
                
                progress_window.after(100, lambda: self.installation_complete(
                    progress_window, success, ""
                ))
            except Exception as exc:
                error_msg = str(exc)
                progress_window.after(100, lambda: self.installation_complete(
                    progress_window, False, error_msg
                ))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=install_worker, daemon=True).start()
    
    def installation_complete(self, progress_window, success: bool, error: str = ""):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        progress_window.destroy()
        
        if success:
            messagebox.showinfo(
                "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n\n"
                "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 3D –∞–Ω–∞–ª–∏–∑–∞."
            )
        else:
            messagebox.showerror(
                "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.\n\n"
                f"–û—à–∏–±–∫–∞: {error}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é:\n"
                "pip install trimesh[easy] pygltflib numpy"
            )
    
    def create_dialog(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–ª–æ–≥"""
        self.dialog = tk.Toplevel(self.parent)
        self.dialog.title("3D –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤")
        self.dialog.geometry("800x600")
        self.dialog.transient(self.parent)
        self.dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.dialog.geometry("+%d+%d" % (
            self.parent.winfo_rootx() + 50,
            self.parent.winfo_rooty() + 50
        ))
        
        self.create_widgets()
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(self.dialog)
        header_frame.pack(fill=tk.X, padx=20, pady=10)
        
        ttk.Label(
            header_frame, 
            text="üèóÔ∏è –ê–Ω–∞–ª–∏–∑ 3D –º–æ–¥–µ–ª–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞",
            font=("Arial", 14, "bold")
        ).pack()
        
        ttk.Label(
            header_frame, 
            text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: GLB, GLTF, OBJ, PLY, STL",
            font=("Arial", 10)
        ).pack(pady=5)
        
        # –§—Ä–µ–π–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        file_frame = ttk.LabelFrame(self.dialog, text="–ó–∞–≥—Ä—É–∑–∫–∞ 3D –º–æ–¥–µ–ª–∏")
        file_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
        file_select_frame = ttk.Frame(file_frame)
        file_select_frame.pack(fill=tk.X, padx=10, pady=10)
        
        self.file_path_var = tk.StringVar()
        ttk.Entry(
            file_select_frame, 
            textvariable=self.file_path_var, 
            state="readonly",
            width=60
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            file_select_frame,
            text="–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª",
            command=self.select_3d_file
        ).pack(side=tk.RIGHT)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
        context_frame = ttk.LabelFrame(self.dialog, text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        context_frame.pack(fill=tk.X, padx=20, pady=10)
        
        self.context_text = tk.Text(context_frame, height=3, wrap=tk.WORD)
        self.context_text.pack(fill=tk.X, padx=10, pady=10)
        self.context_text.insert(tk.END, "–û–ø–∏—à–∏—Ç–µ –æ–±—ä–µ–∫—Ç: —Ç–∏–ø –∑–¥–∞–Ω–∏—è, –≤–æ–∑—Ä–∞—Å—Ç, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ...")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons_frame = ttk.Frame(self.dialog)
        buttons_frame.pack(fill=tk.X, padx=20, pady=10)
        
        self.analyze_button = ttk.Button(
            buttons_frame,
            text="üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å",
            command=self.start_analysis,
            state=tk.DISABLED
        )
        self.analyze_button.pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            buttons_frame,
            text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
            command=self.dialog.destroy
        ).pack(side=tk.RIGHT)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞
        self.progress_frame = ttk.LabelFrame(self.dialog, text="–•–æ–¥ –∞–Ω–∞–ª–∏–∑–∞")
        self.progress_frame.pack(fill=tk.X, padx=20, pady=10)
        
        self.progress_label = ttk.Label(self.progress_frame, text="–ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É")
        self.progress_label.pack(pady=5)
        
        self.progress_bar = ttk.Progressbar(
            self.progress_frame, 
            mode='indeterminate'
        )
        self.progress_bar.pack(fill=tk.X, padx=10, pady=5)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        results_frame = ttk.LabelFrame(self.dialog, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        results_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        text_frame = ttk.Frame(results_frame)
        text_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        self.results_text = tk.Text(text_frame, wrap=tk.WORD, state=tk.DISABLED)
        scrollbar = ttk.Scrollbar(text_frame, orient=tk.VERTICAL, command=self.results_text.yview)
        self.results_text.configure(yscrollcommand=scrollbar.set)
        
        self.results_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        results_buttons_frame = ttk.Frame(results_frame)
        results_buttons_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.save_button = ttk.Button(
            results_buttons_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            command=self.save_analysis_result,
            state=tk.DISABLED
        )
        self.save_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.export_button = ttk.Button(
            results_buttons_frame,
            text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ Word",
            command=self.export_to_word,
            state=tk.DISABLED
        )
        self.export_button.pack(side=tk.LEFT)
    
    def select_3d_file(self):
        """–í—ã–±–æ—Ä 3D —Ñ–∞–π–ª–∞"""
        file_types = [
            ("3D –º–æ–¥–µ–ª–∏", "*.glb *.gltf *.obj *.ply *.stl"),
            ("GLB —Ñ–∞–π–ª—ã", "*.glb"),
            ("GLTF —Ñ–∞–π–ª—ã", "*.gltf"),
            ("OBJ —Ñ–∞–π–ª—ã", "*.obj"),
            ("PLY —Ñ–∞–π–ª—ã", "*.ply"),
            ("STL —Ñ–∞–π–ª—ã", "*.stl"),
            ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
        ]
        
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ 3D –º–æ–¥–µ–ª—å",
            filetypes=file_types
        )
        
        if file_path:
            self.file_path_var.set(file_path)
            self.analyze_button.config(state=tk.NORMAL)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
            if not self.analyzer.is_supported_format(file_path):
                messagebox.showwarning(
                    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                    f"–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è.\n"
                    f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: GLB, OBJ, PLY"
                )
    
    def start_analysis(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ 3D –º–æ–¥–µ–ª–∏"""
        file_path = self.file_path_var.get()
        if not file_path:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª 3D –º–æ–¥–µ–ª–∏")
            return
        
        context = self.context_text.get("1.0", tk.END).strip()
        if context == "–û–ø–∏—à–∏—Ç–µ –æ–±—ä–µ–∫—Ç: —Ç–∏–ø –∑–¥–∞–Ω–∏—è, –≤–æ–∑—Ä–∞—Å—Ç, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ...":
            context = ""
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.analyze_button.config(state=tk.DISABLED)
        self.progress_bar.start()
        self.progress_label.config(text="–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ 3D –º–æ–¥–µ–ª–∏...")
        
        # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.results_text.config(state=tk.NORMAL)
        self.results_text.delete("1.0", tk.END)
        self.results_text.config(state=tk.DISABLED)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def analysis_worker():
            try:
                result = self.analyzer.analyze_3d_model(file_path, context)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.dialog.after(100, lambda: self.analysis_complete(result))
                
            except Exception as e:
                error_result = {
                    'success': False,
                    'error': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}'
                }
                self.dialog.after(100, lambda: self.analysis_complete(error_result))
        
        threading.Thread(target=analysis_worker, daemon=True).start()
    
    def analysis_complete(self, result: Dict):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞"""
        self.progress_bar.stop()
        self.analyze_button.config(state=tk.NORMAL)
        
        if result.get('success', False):
            self.current_analysis = result
            self.display_analysis_results(result['analysis'])
            self.progress_label.config(
                text=f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {result.get('num_views_analyzed', 0)} –≤–∏–¥–æ–≤"
            )
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            self.save_button.config(state=tk.NORMAL)
            self.export_button.config(state=tk.NORMAL)
            
        else:
            error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            self.progress_label.config(text=f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
            
            self.results_text.config(state=tk.NORMAL)
            self.results_text.insert(tk.END, f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:\n{error_msg}")
            self.results_text.config(state=tk.DISABLED)
    
    def display_analysis_results(self, analysis: Dict):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
        self.results_text.config(state=tk.NORMAL)
        self.results_text.delete("1.0", tk.END)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.results_text.insert(tk.END, "üèóÔ∏è –†–ï–ó–£–õ–¨–¢–ê–¢–´ 3D –ê–ù–ê–õ–ò–ó–ê –°–¢–†–û–ò–¢–ï–õ–¨–ù–´–• –î–ï–§–ï–ö–¢–û–í\n")
        self.results_text.insert(tk.END, "=" * 60 + "\n\n")
        
        # –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        overall = analysis.get('overall_condition', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
        self.results_text.insert(tk.END, f"üìä –û–ë–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï: {overall}\n\n")
        
        # –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
        summary = analysis.get('analysis_summary', '')
        if summary:
            self.results_text.insert(tk.END, f"üìã –†–ï–ó–Æ–ú–ï –ê–ù–ê–õ–ò–ó–ê:\n{summary}\n\n")
        
        # –î–µ—Ñ–µ–∫—Ç—ã
        defects = analysis.get('defects', [])
        if defects:
            self.results_text.insert(tk.END, f"üîç –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –î–ï–§–ï–ö–¢–´ ({len(defects)}):\n")
            self.results_text.insert(tk.END, "-" * 40 + "\n\n")
            
            for i, defect in enumerate(defects, 1):
                self.results_text.insert(tk.END, f"{i}. {defect.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ—Ñ–µ–∫—Ç')}\n")
                self.results_text.insert(tk.END, f"   üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {defect.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
                self.results_text.insert(tk.END, f"   ‚ö†Ô∏è –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {defect.get('severity', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}\n")
                self.results_text.insert(tk.END, f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {defect.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n")
                
                causes = defect.get('causes', '')
                if causes:
                    self.results_text.insert(tk.END, f"   üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: {causes}\n")
                
                recommendations = defect.get('recommendations', '')
                if recommendations:
                    self.results_text.insert(tk.END, f"   üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {recommendations}\n")
                
                view_angles = defect.get('view_angles', [])
                if view_angles:
                    self.results_text.insert(tk.END, f"   üëÅÔ∏è –í–∏–¥–∏–º–æ –Ω–∞ –≤–∏–¥–∞—Ö: {', '.join(view_angles)}\n")
                
                self.results_text.insert(tk.END, "\n")
        else:
            self.results_text.insert(tk.END, "‚úÖ –°–µ—Ä—å–µ–∑–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n\n")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ä–µ–º–æ–Ω—Ç—ã
        priority_repairs = analysis.get('priority_repairs', [])
        if priority_repairs:
            self.results_text.insert(tk.END, "üö® –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –†–ï–ú–û–ù–¢–ù–´–ï –†–ê–ë–û–¢–´:\n")
            for i, repair in enumerate(priority_repairs, 1):
                self.results_text.insert(tk.END, f"{i}. {repair}\n")
            self.results_text.insert(tk.END, "\n")
        
        # –í–æ–ø—Ä–æ—Å—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        safety_concerns = analysis.get('safety_concerns', [])
        if safety_concerns:
            self.results_text.insert(tk.END, "‚ö†Ô∏è –í–û–ü–†–û–°–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:\n")
            for i, concern in enumerate(safety_concerns, 1):
                self.results_text.insert(tk.END, f"{i}. {concern}\n")
            self.results_text.insert(tk.END, "\n")
        
        self.results_text.config(state=tk.DISABLED)
    
    def save_analysis_result(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞"""
        if not self.current_analysis:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            analysis_data = {
                'type': '3d_model_analysis',
                'file_path': self.file_path_var.get(),
                'context': self.context_text.get("1.0", tk.END).strip(),
                'analysis': self.current_analysis['analysis'],
                'model_info': self.current_analysis.get('model_info', {}),
                'defects_count': len(self.current_analysis['analysis'].get('defects', [])),
                'overall_condition': self.current_analysis['analysis'].get('overall_condition', ''),
                'views_analyzed': self.current_analysis.get('num_views_analyzed', 0)
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ file_manager
            result_id = self.file_manager.save_analysis_result(analysis_data)
            
            messagebox.showinfo(
                "–£—Å–ø–µ—Ö",
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç 3D –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\nID: {result_id}"
            )
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n{str(e)}")
    
    def export_to_word(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Word"""
        if not self.current_analysis:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è 3D
        messagebox.showinfo(
            "–≠–∫—Å–ø–æ—Ä—Ç –≤ Word",
            "–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ 3D –∞–Ω–∞–ª–∏–∑–∞ –≤ Word –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.\n\n"
            "–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."
        )