#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–∏–∞–ª–æ–≥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ª–æ–≥–∏–Ω/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
"""

import tkinter as tk
from tkinter import ttk, messagebox
import threading
from pathlib import Path
import sys

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
from ui.clipboard_support import ClipboardEntry

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from adapters.auth_client import auth_client

class AuthDialog:
    """–î–∏–∞–ª–æ–≥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    def __init__(self, parent):
        self.parent = parent
        self.result = None
        self.user_info = None
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
        self.dialog = tk.Toplevel(parent)
        self.dialog.title("üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        self.dialog.geometry("450x600")
        self.dialog.resizable(False, False)
        self.dialog.transient(parent)
        self.dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self.setup_styles()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self.setup_events()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        self.check_existing_auth()
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞"""
        self.dialog.update_idletasks()
        x = (self.dialog.winfo_screenwidth() // 2) - (450 // 2)
        y = (self.dialog.winfo_screenheight() // 2) - (600 // 2)
        self.dialog.geometry(f"450x600+{x}+{y}")
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
        primary_color = '#1e88e5'      # –°–∏–Ω–∏–π
        primary_hover = '#1976d2'      # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        secondary_color = '#64b5f6'    # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π
        secondary_hover = '#42a5f5'    # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        background_color = '#f5f5f5'   # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
        surface_color = '#ffffff'      # –ë–µ–ª—ã–π
        text_primary = '#212121'       # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π —Ç–µ–∫—Å—Ç
        text_secondary = '#757575'     # –°–µ—Ä—ã–π —Ç–µ–∫—Å—Ç
        border_color = '#e0e0e0'       # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –¥–ª—è –≥—Ä–∞–Ω–∏—Ü
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –∏ —à—Ä–∏—Ñ—Ç–æ–≤
        style.configure('Title.TLabel', 
                       font=('Segoe UI', 18, 'bold'),
                       foreground=text_primary,
                       background=background_color)
        
        style.configure('Subtitle.TLabel',
                       font=('Segoe UI', 12),
                       foreground=text_secondary,
                       background=background_color)
        
        style.configure('Field.TLabel',
                       font=('Segoe UI', 11, 'bold'),
                       foreground=text_primary,
                       background=background_color)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        style.configure('Primary.TButton',
                       font=('Segoe UI', 12, 'bold'),
                       padding=(20, 10),
                       relief='flat',
                       borderwidth=0,
                       background=primary_color,
                       foreground='white')
        
        style.map('Primary.TButton',
                 background=[('active', primary_hover), ('!active', primary_color)],
                 foreground=[('active', 'white'), ('!active', 'white')])
        
        # –í—Ç–æ—Ä–∏—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        style.configure('Secondary.TButton',
                       font=('Segoe UI', 11),
                       padding=(16, 8),
                       relief='flat',
                       borderwidth=0,
                       background=secondary_color,
                       foreground='white')
        
        style.map('Secondary.TButton',
                 background=[('active', secondary_hover), ('!active', secondary_color)],
                 foreground=[('active', 'white'), ('!active', 'white')])
        
        # –°—Å—ã–ª–∫–∏
        style.configure('Link.TButton',
                       font=('Segoe UI', 10),
                       padding=(8, 4),
                       relief='flat',
                       borderwidth=0,
                       background=background_color,
                       foreground=primary_color)
        
        style.map('Link.TButton',
                 foreground=[('active', primary_hover), ('!active', primary_color)])
        
        # –§—Ä–µ–π–º—ã
        style.configure('Auth.TFrame',
                       background=background_color,
                       relief='flat',
                       borderwidth=0)
        
        # Entry —Å—Ç–∏–ª–∏
        style.configure('Auth.TEntry',
                       font=('Segoe UI', 11),
                       background=surface_color,
                       fieldbackground=surface_color,
                       borderwidth=1,
                       relief='flat',
                       bordercolor=border_color)
        
        style.map('Auth.TEntry',
                 bordercolor=[('focus', primary_color)],
                 fieldbackground=[('focus', surface_color)])
    
    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.dialog, style='Auth.TFrame')
        main_frame.pack(fill=tk.BOTH, expand=True, padx=30, pady=30)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(
            main_frame,
            text="üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
            style='Title.TLabel'
        )
        title_label.pack(pady=(0, 10))
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle_label = ttk.Label(
            main_frame,
            text="–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å",
            style='Subtitle.TLabel'
        )
        subtitle_label.pack(pady=(0, 30))
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–æ—Ä–º
        self.forms_frame = ttk.Frame(main_frame, style='Auth.TFrame')
        self.forms_frame.pack(fill=tk.BOTH, expand=True)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—ã –ª–æ–≥–∏–Ω–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        self.create_login_form()
        self.create_register_form()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.show_login_form()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_frame = ttk.Frame(main_frame, style='Auth.TFrame')
        self.status_frame.pack(fill=tk.X, pady=(20, 0))
        
        self.status_label = ttk.Label(
            self.status_frame,
            text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            style='Subtitle.TLabel'
        )
        self.status_label.pack()
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress = ttk.Progressbar(self.status_frame, mode='indeterminate')
        self.progress.pack(pady=(5, 0))
    
    def create_login_form(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –ª–æ–≥–∏–Ω–∞"""
        self.login_frame = ttk.Frame(self.forms_frame, style='Auth.TFrame')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã
        login_title = ttk.Label(
            self.login_frame,
            text="–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
            style='Field.TLabel'
        )
        login_title.pack(pady=(0, 20))
        
        # –ü–æ–ª–µ email
        email_frame = ttk.Frame(self.login_frame, style='Auth.TFrame')
        email_frame.pack(fill=tk.X, pady=(0, 15))
        
        email_label = ttk.Label(email_frame, text="Email:", style='Field.TLabel')
        email_label.pack(anchor=tk.W)
        
        self.login_email_var = tk.StringVar()
        self.login_email_entry = ClipboardEntry(
            email_frame,
            textvariable=self.login_email_var,
            font=('Segoe UI', 11),
            style='Auth.TEntry'
        )
        self.login_email_entry.pack(fill=tk.X, pady=(5, 0))
        
        # –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è
        password_frame = ttk.Frame(self.login_frame, style='Auth.TFrame')
        password_frame.pack(fill=tk.X, pady=(0, 20))
        
        password_label = ttk.Label(password_frame, text="–ü–∞—Ä–æ–ª—å:", style='Field.TLabel')
        password_label.pack(anchor=tk.W)
        
        self.login_password_var = tk.StringVar()
        self.login_password_entry = ClipboardEntry(
            password_frame,
            textvariable=self.login_password_var,
            show="*",
            font=('Segoe UI', 11),
            style='Auth.TEntry'
        )
        self.login_password_entry.pack(fill=tk.X, pady=(5, 0))
        
        # –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
        login_button = ttk.Button(
            self.login_frame,
            text="üöÄ –í–æ–π—Ç–∏",
            style='Primary.TButton',
            command=self.login
        )
        login_button.pack(fill=tk.X, pady=(0, 15))
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        register_link = ttk.Button(
            self.login_frame,
            text="–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
            style='Link.TButton',
            command=self.show_register_form
        )
        register_link.pack()
    
    def create_register_form(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        self.register_frame = ttk.Frame(self.forms_frame, style='Auth.TFrame')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã
        register_title = ttk.Label(
            self.register_frame,
            text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
            style='Field.TLabel'
        )
        register_title.pack(pady=(0, 20))
        
        # –ü–æ–ª–µ –∏–º–µ–Ω–∏
        name_frame = ttk.Frame(self.register_frame, style='Auth.TFrame')
        name_frame.pack(fill=tk.X, pady=(0, 15))
        
        name_label = ttk.Label(name_frame, text="–ò–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", style='Field.TLabel')
        name_label.pack(anchor=tk.W)
        
        self.register_name_var = tk.StringVar()
        self.register_name_entry = ClipboardEntry(
            name_frame,
            textvariable=self.register_name_var,
            font=('Segoe UI', 11),
            style='Auth.TEntry'
        )
        self.register_name_entry.pack(fill=tk.X, pady=(5, 0))
        
        # –ü–æ–ª–µ email
        email_frame = ttk.Frame(self.register_frame, style='Auth.TFrame')
        email_frame.pack(fill=tk.X, pady=(0, 15))
        
        email_label = ttk.Label(email_frame, text="Email:", style='Field.TLabel')
        email_label.pack(anchor=tk.W)
        
        self.register_email_var = tk.StringVar()
        self.register_email_entry = ClipboardEntry(
            email_frame,
            textvariable=self.register_email_var,
            font=('Segoe UI', 11),
            style='Auth.TEntry'
        )
        self.register_email_entry.pack(fill=tk.X, pady=(5, 0))
        
        # –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è
        password_frame = ttk.Frame(self.register_frame, style='Auth.TFrame')
        password_frame.pack(fill=tk.X, pady=(0, 15))
        
        password_label = ttk.Label(password_frame, text="–ü–∞—Ä–æ–ª—å:", style='Field.TLabel')
        password_label.pack(anchor=tk.W)
        
        self.register_password_var = tk.StringVar()
        self.register_password_entry = ClipboardEntry(
            password_frame,
            textvariable=self.register_password_var,
            show="*",
            font=('Segoe UI', 11),
            style='Auth.TEntry'
        )
        self.register_password_entry.pack(fill=tk.X, pady=(5, 0))
        
        # –ü–æ–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
        confirm_password_frame = ttk.Frame(self.register_frame, style='Auth.TFrame')
        confirm_password_frame.pack(fill=tk.X, pady=(0, 20))
        
        confirm_password_label = ttk.Label(confirm_password_frame, text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", style='Field.TLabel')
        confirm_password_label.pack(anchor=tk.W)
        
        self.register_confirm_password_var = tk.StringVar()
        self.register_confirm_password_entry = ClipboardEntry(
            confirm_password_frame,
            textvariable=self.register_confirm_password_var,
            show="*",
            font=('Segoe UI', 11),
            style='Auth.TEntry'
        )
        self.register_confirm_password_entry.pack(fill=tk.X, pady=(5, 0))
        
        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        register_button = ttk.Button(
            self.register_frame,
            text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
            style='Primary.TButton',
            command=self.register
        )
        register_button.pack(fill=tk.X, pady=(0, 15))
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ–≥–∏–Ω
        login_link = ttk.Button(
            self.register_frame,
            text="–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏",
            style='Link.TButton',
            command=self.show_login_form
        )
        login_link.pack()
    
    def setup_events(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª—è—Ö –ª–æ–≥–∏–Ω–∞
        self.login_email_entry.bind('<Return>', lambda e: self.login())
        self.login_password_entry.bind('<Return>', lambda e: self.login())
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª—è—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        self.register_name_entry.bind('<Return>', lambda e: self.register())
        self.register_email_entry.bind('<Return>', lambda e: self.register())
        self.register_password_entry.bind('<Return>', lambda e: self.register())
        self.register_confirm_password_entry.bind('<Return>', lambda e: self.register())
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        self.dialog.bind('<Escape>', lambda e: self.cancel())
    
    def show_login_form(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞"""
        # –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º—ã
        for widget in self.forms_frame.winfo_children():
            widget.pack_forget()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞
        self.login_frame.pack(fill=tk.BOTH, expand=True)
        
        # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ email
        self.login_email_entry.focus()
    
    def show_register_form(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        # –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º—ã
        for widget in self.forms_frame.winfo_children():
            widget.pack_forget()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        self.register_frame.pack(fill=tk.BOTH, expand=True)
        
        # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –∏–º–µ–Ω–∏
        self.register_name_entry.focus()
    
    def check_existing_auth(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        if auth_client.is_authenticated():
            user_name = auth_client.get_user_name()
            self.update_status(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π
            self.result = True
            self.user_info = auth_client.user_info
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            self.dialog.after(1500, self.dialog.destroy)
            return
    
    def update_status(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_label.configure(text=message)
        self.dialog.update_idletasks()
    
    def login(self):
        """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"""
        email = self.login_email_var.get().strip()
        password = self.login_password_var.get().strip()
        
        if not email or not password:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ö–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.progress.start()
        self.update_status("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥...")
        
        threading.Thread(
            target=self._login_thread,
            args=(email, password),
            daemon=True
        ).start()
    
    def _login_thread(self, email, password):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
        try:
            result = auth_client.login(email, password)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.dialog.after(0, self._handle_login_result, result)
            
        except Exception as e:
            self.dialog.after(0, self._handle_login_result, {
                'success': False,
                'error': f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}'
            })
    
    def _handle_login_result(self, result):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—Ö–æ–¥–∞"""
        self.progress.stop()
        
        if result['success']:
            self.result = True
            self.user_info = result['user']
            self.update_status("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
            self.dialog.after(1000, self.dialog.destroy)
        else:
            self.update_status("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞")
            messagebox.showerror("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞", result['error'])
    
    def register(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"""
        name = self.register_name_var.get().strip()
        email = self.register_email_var.get().strip()
        password = self.register_password_var.get().strip()
        confirm_password = self.register_confirm_password_var.get().strip()
        
        if not email or not password:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
            return
        
        if password != confirm_password:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            return
        
        if len(password) < 6:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.progress.start()
        self.update_status("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        
        threading.Thread(
            target=self._register_thread,
            args=(email, password, name if name else None),
            daemon=True
        ).start()
    
    def _register_thread(self, email, password, name):
        """–ü–æ—Ç–æ–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            result = auth_client.register(email, password, name)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.dialog.after(0, self._handle_register_result, result)
            
        except Exception as e:
            self.dialog.after(0, self._handle_register_result, {
                'success': False,
                'error': f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}'
            })
    
    def _handle_register_result(self, result):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        self.progress.stop()
        
        if result['success']:
            self.update_status("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞
            self.show_login_form()
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ email
            self.login_email_var.set(result['user']['email'])
            self.login_password_entry.focus()
        else:
            self.update_status("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            messagebox.showerror("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", result['error'])
    
    def cancel(self):
        """–û—Ç–º–µ–Ω–∞"""
        self.result = False
        self.dialog.destroy()


def show_auth_dialog(parent) -> tuple[bool, dict]:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    dialog = AuthDialog(parent)
    dialog.dialog.wait_window()
    
    return dialog.result, dialog.user_info


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    root = tk.Tk()
    root.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    
    result, user_info = show_auth_dialog(root)
    
    if result:
        print("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}")
    else:
        print("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    root.destroy()
