import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from pathlib import Path
import threading
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from adapters.cloud_sync import CloudSyncManager

class CloudSyncDialog:
    """–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, parent, file_manager=None):
        self.file_manager = file_manager
        self.sync_manager = CloudSyncManager()
        self.config = self.sync_manager.config_manager.config
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
        self.dialog = tk.Toplevel(parent)
        self.dialog.title("üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–ª–∞—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        self.dialog.geometry("700x600")
        self.dialog.transient(parent)
        self.dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞
        self.center_window(parent)
        
        self.create_widgets()
        self.load_current_settings()
        
        # –ñ–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞
        self.dialog.wait_window()
        
    def center_window(self, parent):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—è"""
        parent.update_idletasks()
        x = parent.winfo_x() + (parent.winfo_width() // 2) - 350
        y = parent.winfo_y() + (parent.winfo_height() // 2) - 300
        self.dialog.geometry(f"+{x}+{y}")
        
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(self.dialog)
        header_frame.pack(fill=tk.X, padx=20, pady=(20, 10))
        
        ttk.Label(
            header_frame, 
            text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–ª–∞—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", 
            font=("Arial", 14, "bold")
        ).pack(anchor=tk.W)
        
        ttk.Label(
            header_frame,
            text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –≤ –æ–±–ª–∞–∫–æ",
            font=("Arial", 10),
            foreground="gray"
        ).pack(anchor=tk.W)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        main_frame = ttk.LabelFrame(self.dialog, text="–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", padding=10)
        main_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # –í–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.enabled_var = tk.BooleanVar()
        ttk.Checkbutton(
            main_frame,
            text="–í–∫–ª—é—á–∏—Ç—å –æ–±–ª–∞—á–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é",
            variable=self.enabled_var,
            command=self.on_enabled_change
        ).pack(anchor=tk.W, pady=5)
        
        # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        method_frame = ttk.Frame(main_frame)
        method_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(method_frame, text="–ú–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:").pack(side=tk.LEFT)
        
        self.method_var = tk.StringVar(value="ftp")
        method_combo = ttk.Combobox(
            method_frame,
            textvariable=self.method_var,
            values=["ftp", "email", "webhook", "google_drive"],
            state="readonly",
            width=15
        )
        method_combo.pack(side=tk.LEFT, padx=(10, 0))
        method_combo.bind('<<ComboboxSelected>>', self.on_method_change)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        self.auto_sync_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            main_frame,
            text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞",
            variable=self.auto_sync_var
        ).pack(anchor=tk.W, pady=5)
        
        # Notebook –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        self.notebook = ttk.Notebook(self.dialog)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        self.create_ftp_tab()
        self.create_email_tab()
        self.create_webhook_tab()
        self.create_google_drive_tab()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ttk.Frame(self.dialog)
        buttons_frame.pack(fill=tk.X, padx=20, pady=10)
        
        ttk.Button(
            buttons_frame,
            text="üß™ –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
            command=self.test_connection
        ).pack(side=tk.LEFT)
        
        ttk.Button(
            buttons_frame,
            text="üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å",
            command=self.sync_now
        ).pack(side=tk.LEFT, padx=(10, 0))
        
        ttk.Button(
            buttons_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            command=self.save_settings
        ).pack(side=tk.RIGHT)
        
        ttk.Button(
            buttons_frame,
            text="–û—Ç–º–µ–Ω–∞",
            command=self.dialog.destroy
        ).pack(side=tk.RIGHT, padx=(0, 10))
        
    def create_ftp_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ FTP"""
        ftp_frame = ttk.Frame(self.notebook)
        self.notebook.add(ftp_frame, text="üìÅ FTP –°–µ—Ä–≤–µ—Ä")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ FTP
        ttk.Label(ftp_frame, text="–•–æ—Å—Ç:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        self.ftp_host_var = tk.StringVar()
        ttk.Entry(ftp_frame, textvariable=self.ftp_host_var, width=30).grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(ftp_frame, text="–ü–æ—Ä—Ç:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=5)
        self.ftp_port_var = tk.StringVar(value="21")
        ttk.Entry(ftp_frame, textvariable=self.ftp_port_var, width=10).grid(row=1, column=1, sticky=tk.W, padx=5, pady=5)
        
        ttk.Label(ftp_frame, text="–õ–æ–≥–∏–Ω:").grid(row=2, column=0, sticky=tk.W, padx=5, pady=5)
        self.ftp_user_var = tk.StringVar()
        ttk.Entry(ftp_frame, textvariable=self.ftp_user_var, width=30).grid(row=2, column=1, padx=5, pady=5)
        
        ttk.Label(ftp_frame, text="–ü–∞—Ä–æ–ª—å:").grid(row=3, column=0, sticky=tk.W, padx=5, pady=5)
        self.ftp_pass_var = tk.StringVar()
        ttk.Entry(ftp_frame, textvariable=self.ftp_pass_var, width=30, show="*").grid(row=3, column=1, padx=5, pady=5)
        
        ttk.Label(ftp_frame, text="–ü–∞–ø–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:").grid(row=4, column=0, sticky=tk.W, padx=5, pady=5)
        self.ftp_path_var = tk.StringVar(value="/reports/")
        ttk.Entry(ftp_frame, textvariable=self.ftp_path_var, width=30).grid(row=4, column=1, padx=5, pady=5)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        info_text = """FTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–æ–≤.
–§–∞–π–ª—ã –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º."""
        
        ttk.Label(ftp_frame, text=info_text, foreground="gray", wraplength=400).grid(
            row=5, column=0, columnspan=2, padx=5, pady=10, sticky=tk.W
        )
        
    def create_email_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Email"""
        email_frame = ttk.Frame(self.notebook)
        self.notebook.add(email_frame, text="üìß Email")
        
        ttk.Label(email_frame, text="SMTP —Å–µ—Ä–≤–µ—Ä:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        self.email_smtp_var = tk.StringVar()
        ttk.Entry(email_frame, textvariable=self.email_smtp_var, width=30).grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(email_frame, text="–ü–æ—Ä—Ç:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=5)
        self.email_port_var = tk.StringVar(value="587")
        ttk.Entry(email_frame, textvariable=self.email_port_var, width=10).grid(row=1, column=1, sticky=tk.W, padx=5, pady=5)
        
        ttk.Label(email_frame, text="Email:").grid(row=2, column=0, sticky=tk.W, padx=5, pady=5)
        self.email_user_var = tk.StringVar()
        ttk.Entry(email_frame, textvariable=self.email_user_var, width=30).grid(row=2, column=1, padx=5, pady=5)
        
        ttk.Label(email_frame, text="–ü–∞—Ä–æ–ª—å:").grid(row=3, column=0, sticky=tk.W, padx=5, pady=5)
        self.email_pass_var = tk.StringVar()
        ttk.Entry(email_frame, textvariable=self.email_pass_var, width=30, show="*").grid(row=3, column=1, padx=5, pady=5)
        
        ttk.Label(email_frame, text="–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:").grid(row=4, column=0, sticky=tk.W, padx=5, pady=5)
        self.email_recipients_var = tk.StringVar()
        ttk.Entry(email_frame, textvariable=self.email_recipients_var, width=40).grid(row=4, column=1, padx=5, pady=5)
        
        ttk.Label(email_frame, text="(—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", foreground="gray").grid(row=5, column=1, sticky=tk.W, padx=5)
        
        info_text = """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ email.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è Gmail, Yandex, Mail.ru –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ SMTP.
–û—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–∏—è."""
        
        ttk.Label(email_frame, text=info_text, foreground="gray", wraplength=400).grid(
            row=6, column=0, columnspan=2, padx=5, pady=10, sticky=tk.W
        )
        
    def create_webhook_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Webhook"""
        webhook_frame = ttk.Frame(self.notebook)
        self.notebook.add(webhook_frame, text="üîó Webhook")
        
        ttk.Label(webhook_frame, text="URL:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        self.webhook_url_var = tk.StringVar()
        ttk.Entry(webhook_frame, textvariable=self.webhook_url_var, width=50).grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(webhook_frame, text="–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=5)
        self.webhook_token_var = tk.StringVar()
        ttk.Entry(webhook_frame, textvariable=self.webhook_token_var, width=40).grid(row=1, column=1, padx=5, pady=5)
        
        info_text = """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ HTTP POST –∑–∞–ø—Ä–æ—Å.
–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.
–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –ø–æ–ª–µ 'file', –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ 'data'."""
        
        ttk.Label(webhook_frame, text=info_text, foreground="gray", wraplength=400).grid(
            row=2, column=0, columnspan=2, padx=5, pady=10, sticky=tk.W
        )
        
    def create_google_drive_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Google Drive"""
        drive_frame = ttk.Frame(self.notebook)
        self.notebook.add(drive_frame, text="‚òÅÔ∏è Google Drive")
        
        ttk.Label(drive_frame, text="–§–∞–π–ª credentials.json:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        
        creds_frame = ttk.Frame(drive_frame)
        creds_frame.grid(row=0, column=1, padx=5, pady=5, sticky=tk.W)
        
        self.drive_creds_var = tk.StringVar()
        ttk.Entry(creds_frame, textvariable=self.drive_creds_var, width=30).pack(side=tk.LEFT)
        ttk.Button(creds_frame, text="–û–±–∑–æ—Ä...", command=self.select_credentials_file).pack(side=tk.LEFT, padx=(5, 0))
        
        ttk.Label(drive_frame, text="ID –ø–∞–ø–∫–∏:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=5)
        self.drive_folder_var = tk.StringVar()
        ttk.Entry(drive_frame, textvariable=self.drive_folder_var, width=40).grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Label(drive_frame, text="(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", foreground="gray").grid(row=2, column=1, sticky=tk.W, padx=5)
        
        info_text = """–ó–∞–≥—Ä—É–∑–∫–∞ –≤ Google Drive.
–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Google Cloud Console –∏ —Ñ–∞–π–ª credentials.json.
–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: console.cloud.google.com ‚Üí APIs & Services ‚Üí Credentials"""
        
        ttk.Label(drive_frame, text=info_text, foreground="gray", wraplength=400).grid(
            row=3, column=0, columnspan=2, padx=5, pady=10, sticky=tk.W
        )
        
    def select_credentials_file(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ credentials.json"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª credentials.json",
            filetypes=[("JSON —Ñ–∞–π–ª—ã", "*.json"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        if file_path:
            self.drive_creds_var.set(file_path)
            
    def load_current_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.enabled_var.set(self.config.get('enabled', False))
        self.method_var.set(self.config.get('sync_method', 'ftp'))
        self.auto_sync_var.set(self.config.get('auto_sync', True))
        
        # FTP
        ftp_config = self.config.get('ftp', {})
        self.ftp_host_var.set(ftp_config.get('host', ''))
        self.ftp_port_var.set(str(ftp_config.get('port', 21)))
        self.ftp_user_var.set(ftp_config.get('username', ''))
        self.ftp_pass_var.set(ftp_config.get('password', ''))
        self.ftp_path_var.set(ftp_config.get('remote_path', '/reports/'))
        
        # Email
        email_config = self.config.get('email', {})
        self.email_smtp_var.set(email_config.get('smtp_server', ''))
        self.email_port_var.set(str(email_config.get('smtp_port', 587)))
        self.email_user_var.set(email_config.get('username', ''))
        self.email_pass_var.set(email_config.get('password', ''))
        self.email_recipients_var.set(', '.join(email_config.get('recipients', [])))
        
        # Webhook
        webhook_config = self.config.get('webhook', {})
        self.webhook_url_var.set(webhook_config.get('url', ''))
        self.webhook_token_var.set(webhook_config.get('auth_token', ''))
        
        # Google Drive
        drive_config = self.config.get('google_drive', {})
        self.drive_creds_var.set(drive_config.get('credentials_file', ''))
        self.drive_folder_var.set(drive_config.get('folder_id', ''))
        
        self.on_enabled_change()
        
    def on_enabled_change(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–∏—è"""
        enabled = self.enabled_var.get()
        state = "normal" if enabled else "disabled"
        
        # –í–∫–ª—é—á–∞–µ–º/–≤—ã–∫–ª—é—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        for child in self.notebook.winfo_children():
            self._set_widget_state(child, state)
            
    def _set_widget_state(self, widget, state):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤"""
        try:
            widget.configure(state=state)
        except:
            pass
        
        for child in widget.winfo_children():
            self._set_widget_state(child, state)
            
    def on_method_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        method = self.method_var.get()
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É
        method_tabs = {
            'ftp': 0,
            'email': 1,
            'webhook': 2,
            'google_drive': 3
        }
        
        if method in method_tabs:
            self.notebook.select(method_tabs[method])
            
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.config['enabled'] = self.enabled_var.get()
            self.config['sync_method'] = self.method_var.get()
            self.config['auto_sync'] = self.auto_sync_var.get()
            
            # FTP
            self.config['ftp'] = {
                'host': self.ftp_host_var.get(),
                'port': int(self.ftp_port_var.get() or 21),
                'username': self.ftp_user_var.get(),
                'password': self.ftp_pass_var.get(),
                'remote_path': self.ftp_path_var.get()
            }
            
            # Email
            recipients = [r.strip() for r in self.email_recipients_var.get().split(',') if r.strip()]
            self.config['email'] = {
                'smtp_server': self.email_smtp_var.get(),
                'smtp_port': int(self.email_port_var.get() or 587),
                'username': self.email_user_var.get(),
                'password': self.email_pass_var.get(),
                'recipients': recipients
            }
            
            # Webhook
            self.config['webhook'] = {
                'url': self.webhook_url_var.get(),
                'auth_token': self.webhook_token_var.get()
            }
            
            # Google Drive
            self.config['google_drive'] = {
                'credentials_file': self.drive_creds_var.get(),
                'folder_id': self.drive_folder_var.get()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            self.sync_manager.config_manager.save_config()
            
            messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            self.dialog.destroy()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            
    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        method = self.method_var.get()
        
        def test_thread():
            try:
                # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
                self.save_settings()
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                success = self.sync_manager.test_connection(method)
                
                if success:
                    self.dialog.after(0, lambda: messagebox.showinfo(
                        "–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", 
                        f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {method} —É—Å–ø–µ—à–Ω–æ!"
                    ))
                else:
                    self.dialog.after(0, lambda: messagebox.showerror(
                        "–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", 
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {method}"
                    ))
                    
            except Exception as e:
                self.dialog.after(0, lambda: messagebox.showerror(
                    "–û—à–∏–±–∫–∞", 
                    f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"
                ))
        
        threading.Thread(target=test_thread, daemon=True).start()
        
    def sync_now(self):
        """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"""
        if not self.file_manager:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        def sync_thread():
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                self.save_settings()
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                dirs = self.file_manager.get_project_directories()
                project_name = self.file_manager.current_project
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
                result = self.sync_manager.sync_project_reports(dirs['project_dir'], project_name)
                
                synced_count = len(result['synced'])
                failed_count = len(result['failed'])
                
                message = f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {synced_count}\n‚ùå –û—à–∏–±–æ–∫: {failed_count}"
                
                self.dialog.after(0, lambda: messagebox.showinfo("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", message))
                
            except Exception as e:
                self.dialog.after(0, lambda: messagebox.showerror(
                    "–û—à–∏–±–∫–∞", 
                    f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}"
                ))
        
        threading.Thread(target=sync_thread, daemon=True).start()