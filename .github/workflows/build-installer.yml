name: Build Windows Installer

on:
  # –ó–∞–ø—É—Å–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ –≤ GitHub Actions
  workflow_dispatch:
    inputs:
      app_version:
        description: '–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)'
        required: false
        type: string
        default: ''
  
  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—É—à–µ –≤ main –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ª–∏–∑–Ω–æ–≥–æ —Ç–µ–≥–∞
  push:
    branches: [ main ]
    tags:
      - 'v*'

jobs:
  build-installer:
    runs-on: windows-latest
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∏–∑ —Ç–µ–≥–æ–≤
        fetch-depth: 0
    
    - name: üîß Setup Inno Setup
      run: |
        echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Inno Setup..."
        choco install innosetup -y
        echo "Inno Setup —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    
    - name: üìä Determine app version
      id: version
      shell: bash
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∫–∞–∑–∞–Ω–∞ –≤–µ—Ä—Å–∏—è –≤—Ä—É—á–Ω—É—é
        if [ -n "${{ github.event.inputs.app_version }}" ]; then
          VERSION="${{ github.event.inputs.app_version }}"
          echo "–ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é: $VERSION"
        else
          # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ git —Ç–µ–≥–∞
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LATEST_TAG" ] && [[ $LATEST_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'v' –∏–∑ —Ç–µ–≥–∞
            VERSION=${LATEST_TAG#v}
            echo "–ù–∞–π–¥–µ–Ω git —Ç–µ–≥: $LATEST_TAG, –≤–µ—Ä—Å–∏—è: $VERSION"
          else
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
            if [ -f ".env" ]; then
              VERSION=$(grep -E '^APP_VERSION=' .env | cut -d'=' -f2 | tr -d '\r\n' || echo "")
            fi
            
            # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
            if [ -z "$VERSION" ]; then
              VERSION="0.1.0-dev"
              echo "–í–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é: $VERSION"
            else
              echo "–ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –≤ .env: $VERSION"
            fi
          fi
        fi
        
        echo "APP_VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: $VERSION"
    
    - name: üìÅ Prepare build directory
      run: |
        echo "–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞..."
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É build/win –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (-not (Test-Path "build\win")) {
          New-Item -ItemType Directory -Path "build\win" -Force
          echo "–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ build\win"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        $exeFiles = Get-ChildItem -Path "build\win" -Filter "*.exe" -Recurse
        if ($exeFiles.Count -eq 0) {
          echo "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –Ω–∞–π–¥–µ–Ω–æ exe —Ñ–∞–π–ª–æ–≤ –≤ build\win\"
          echo "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–ø–∫–µ"
          echo "–û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:"
          echo "  build\win\DefectAnalyzer.exe"
          echo "  build\win\[–¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏]"
        } else {
          echo "‚úÖ –ù–∞–π–¥–µ–Ω—ã exe —Ñ–∞–π–ª—ã:"
          $exeFiles | ForEach-Object { echo "  - $($_.FullName)" }
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ build/win
        echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ build\win\:"
        Get-ChildItem -Path "build\win" -Recurse | ForEach-Object { echo "  $($_.FullName)" }
    
    - name: üî® Build Windows application
      run: |
        echo "–°–æ–±–∏—Ä–∞–µ–º Windows –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        python --version
        pip --version
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
        pip install -r requirements.txt
        pip install pyinstaller
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–±–æ—Ä–∫–∏
        if (-not (Test-Path "build\win")) {
          New-Item -ItemType Directory -Path "build\win" -Force
        }
        
        # –°–æ–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ PyInstaller
        echo "–ó–∞–ø—É—Å–∫–∞–µ–º PyInstaller..."
        pyinstaller --onefile --windowed --name=DefectAnalyzer --icon=assets/icon.ico `
          --add-data "ui;ui" `
          --add-data "common;common" `
          --add-data "docx_generator;docx_generator" `
          --add-data "adapters;adapters" `
          --add-data "assets;assets" `
          --add-data "examples;examples" `
          --add-data "settings.py;." `
          --hidden-import=tkinter `
          --hidden-import=tkinter.ttk `
          --hidden-import=tkinter.messagebox `
          --hidden-import=tkinter.filedialog `
          --hidden-import=PIL `
          --hidden-import=PIL.Image `
          --hidden-import=PIL.ImageTk `
          --hidden-import=openai `
          --hidden-import=pathlib `
          --hidden-import=threading `
          --hidden-import=json `
          --hidden-import=logging `
          --hidden-import=requests `
          --hidden-import=docx `
          --hidden-import=dotenv `
          --hidden-import=trimesh `
          --hidden-import=numpy `
          main.py
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ build/win
        if (Test-Path "dist\DefectAnalyzer.exe") {
          Copy-Item "dist\DefectAnalyzer.exe" "build\win\" -Force
          echo "‚úÖ DefectAnalyzer.exe —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ build\win\"
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
          $fileInfo = Get-Item "build\win\DefectAnalyzer.exe"
          echo "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: $([math]::Round($fileInfo.Length / 1MB, 2)) MB"
        } else {
          echo "‚ùå DefectAnalyzer.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ dist\"
          exit 1
        }
    
    - name: üìù Update installer script version
      run: |
        echo "–û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ —Å–∫—Ä–∏–ø—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞..."
        
        $version = "${{ steps.version.outputs.APP_VERSION }}"
        $issFile = "installer\windows\DefectAnalyzer.iss"
        
        if (Test-Path $issFile) {
          # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ iss —Ñ–∞–π–ª–µ
          $content = Get-Content $issFile -Raw
          $content = $content -replace '#define AppVersion "[^"]*"', "#define AppVersion `"$version`""
          
          # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è VersionInfoVersion (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ X.Y.Z.W)
          $versionParts = $version -split '\.'
          if ($versionParts.Length -eq 3) {
            $versionInfoVersion = "$($versionParts[0]).$($versionParts[1]).$($versionParts[2]).0"
          } else {
            $versionInfoVersion = "1.0.0.0"
          }
          
          # –û–±–Ω–æ–≤–ª—è–µ–º VersionInfoVersion
          $content = $content -replace 'VersionInfoVersion=\d+\.\d+\.\d+\.\d+', "VersionInfoVersion=$versionInfoVersion"
          
          Set-Content $issFile -Value $content -Encoding UTF8
          echo "‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ $issFile –¥–æ $version"
          echo "‚úÖ VersionInfoVersion —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ $versionInfoVersion"
        } else {
          echo "‚ùå –§–∞–π–ª $issFile –Ω–µ –Ω–∞–π–¥–µ–Ω!"
          exit 1
        }
    
    - name: üîß Compile installer with Inno Setup
      run: |
        echo "–ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —Å –ø–æ–º–æ—â—å—é Inno Setup..."
        
        $issFile = "installer\windows\DefectAnalyzer.iss"
        $isccPath = "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe"
        
        if (-not (Test-Path $isccPath)) {
          $isccPath = "${env:ProgramFiles}\Inno Setup 6\ISCC.exe"
        }
        
        if (-not (Test-Path $isccPath)) {
          echo "‚ùå ISCC.exe –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É Inno Setup"
          Get-ChildItem -Path "${env:ProgramFiles}" -Filter "*Inno*" -Recurse
          Get-ChildItem -Path "${env:ProgramFiles(x86)}" -Filter "*Inno*" -Recurse
          exit 1
        }
        
        echo "–ò—Å–ø–æ–ª—å–∑—É–µ–º ISCC: $isccPath"
        echo "–ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º: $issFile"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é
        & $isccPath $issFile
        
        if ($LASTEXITCODE -eq 0) {
          echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω!"
        } else {
          echo "‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞!"
          exit 1
        }
    
    - name: üìã List generated files
      run: |
        echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É dist (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–ª—è Inno Setup)
        if (Test-Path "dist") {
          echo "–§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ dist:"
          Get-ChildItem -Path "dist" | ForEach-Object { echo "  - $($_.Name) ($($_.Length) bytes)" }
        } else {
          echo "‚ö†Ô∏è –ü–∞–ø–∫–∞ dist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É installer (–µ—Å–ª–∏ OutputDir –∏–∑–º–µ–Ω–µ–Ω)
        if (Test-Path "installer") {
          echo "–§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ installer:"
          Get-ChildItem -Path "installer" -Recurse | ForEach-Object { echo "  - $($_.FullName)" }
        }
        
        # –ò—â–µ–º setup —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ
        $setupFiles = Get-ChildItem -Path "." -Filter "Setup-*.exe" -Recurse
        if ($setupFiles.Count -gt 0) {
          echo "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∏:"
          $setupFiles | ForEach-Object { echo "  - $($_.FullName) ($($_.Length) bytes)" }
        }
    
    - name: üì¶ Upload installer artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: |
          dist/*.exe
          Setup-*.exe
        retention-days: 30
    
    - name: üìä Build summary
      run: |
        echo "=========================================="
        echo "üèóÔ∏è –°–ë–û–†–ö–ê –£–°–¢–ê–ù–û–í–©–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê"
        echo "=========================================="
        echo "–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${{ steps.version.outputs.APP_VERSION }}"
        echo "Git commit: ${{ github.sha }}"
        echo "Git ref: ${{ github.ref }}"
        echo "=========================================="
        echo ""
        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç 'windows-installer'"
        echo "üì• –°–∫–∞—á–∞—Ç—å –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ 'Actions' -> 'Artifacts'"
        echo ""
        echo "üîß –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏:"
        echo "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Inno Setup"
        echo "2. –û—Ç–∫—Ä–æ–π—Ç–µ installer/windows/DefectAnalyzer.iss"
        echo "3. –ù–∞–∂–º–∏—Ç–µ F9 –∏–ª–∏ Build -> Compile"
        echo ""
        echo "=========================================="
