name: Build Windows Installer v2

on:
  # –ó–∞–ø—É—Å–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ –≤ GitHub Actions
  workflow_dispatch:
    inputs:
      app_version:
        description: '–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)'
        required: false
        type: string
        default: ''
  
  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—É—à–µ –≤ main –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ª–∏–∑–Ω–æ–≥–æ —Ç–µ–≥–∞
  push:
    branches: [ main ]
    tags:
      - 'v*'

jobs:
  build-installer:
    runs-on: windows-latest
    
    steps:
    - name: üßπ Clean workspace
      run: |
        echo "–û—á–∏—â–∞–µ–º —Ä–∞–±–æ—á—É—é –æ–±–ª–∞—Å—Ç—å..."
        if (Test-Path "build") { Remove-Item "build" -Recurse -Force }
        if (Test-Path "dist") { Remove-Item "dist" -Recurse -Force }
        if (Test-Path "*.spec") { Remove-Item "*.spec" -Force }
        echo "–†–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å –æ—á–∏—â–µ–Ω–∞"
    
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∏–∑ —Ç–µ–≥–æ–≤
        fetch-depth: 0
    
    - name: üîß Setup Inno Setup
      run: |
        echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Inno Setup..."
        choco install innosetup -y
        echo "Inno Setup —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    
    - name: üìä Determine app version
      id: version
      shell: bash
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∫–∞–∑–∞–Ω–∞ –≤–µ—Ä—Å–∏—è –≤—Ä—É—á–Ω—É—é
        if [ -n "${{ github.event.inputs.app_version }}" ]; then
          VERSION="${{ github.event.inputs.app_version }}"
          echo "–ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é: $VERSION"
        else
          # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ git —Ç–µ–≥–∞
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LATEST_TAG" ] && [[ $LATEST_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'v' –∏–∑ —Ç–µ–≥–∞
            VERSION=${LATEST_TAG#v}
            echo "–ù–∞–π–¥–µ–Ω git —Ç–µ–≥: $LATEST_TAG, –≤–µ—Ä—Å–∏—è: $VERSION"
          else
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
            if [ -f ".env" ]; then
              VERSION=$(grep -E '^APP_VERSION=' .env | cut -d'=' -f2 | tr -d '\r\n' || echo "")
            fi
            
            # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
            if [ -z "$VERSION" ]; then
              VERSION="1.0.0"
              echo "–í–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é: $VERSION"
            else
              echo "–ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –≤ .env: $VERSION"
            fi
          fi
        fi
        
        echo "APP_VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: $VERSION"
    
    - name: üìÅ Prepare build directory
      run: |
        echo "–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞..."
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É build/win –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (-not (Test-Path "build\win")) {
          New-Item -ItemType Directory -Path "build\win" -Force
          echo "–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ build\win"
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ build/win (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
        echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ build\win\ (–ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π):"
        Get-ChildItem -Path "build\win" -Recurse | ForEach-Object { echo "  $($_.FullName)" }
    
    - name: üî® Build Windows application
      run: |
        echo "–°–æ–±–∏—Ä–∞–µ–º Windows –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        python --version
        pip --version
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        echo "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É PyInstaller
        pyinstaller --version
        if ($LASTEXITCODE -ne 0) {
          echo "‚ùå PyInstaller –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!"
          exit 1
        }
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–±–æ—Ä–∫–∏
        if (-not (Test-Path "build\win")) {
          New-Item -ItemType Directory -Path "build\win" -Force
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
        echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞..."
        
        $requiredFiles = @("main.py", "settings.py", "requirements.txt")
        $requiredDirs = @("ui", "adapters", "common", "docx_generator", "assets")
        
        foreach ($file in $requiredFiles) {
          if (Test-Path $file) {
            echo "[OK] $file –Ω–∞–π–¥–µ–Ω"
          } else {
            echo "[ERROR] $file –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            exit 1
          }
        }
        
        foreach ($dir in $requiredDirs) {
          if (Test-Path $dir) {
            echo "[OK] –ø–∞–ø–∫–∞ $dir –Ω–∞–π–¥–µ–Ω–∞"
          } else {
            echo "[ERROR] –ø–∞–ø–∫–∞ $dir –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
            exit 1
          }
        }
        
        echo "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –º–æ–¥—É–ª–∏
        echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º Python –º–æ–¥—É–ª–∏..."
        try {
          python -c "import tkinter; print('[OK] tkinter OK')"
        } catch {
          echo "[ERROR] tkinter –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!"
          exit 1
        }
        
        try {
          python -c "import PIL; print('[OK] PIL OK')"
        } catch {
          echo "[ERROR] PIL –Ω–µ –Ω–∞–π–¥–µ–Ω!"
          pip install Pillow
        }
        
        try {
          python -c "import openai; print('[OK] openai OK')"
        } catch {
          echo "[ERROR] openai –Ω–µ –Ω–∞–π–¥–µ–Ω!"
          exit 1
        }
        
        try {
          python -c "import requests; print('[OK] requests OK')"
        } catch {
          echo "[ERROR] requests –Ω–µ –Ω–∞–π–¥–µ–Ω!"
          exit 1
        }
        
        try {
          python -c "import docx; print('[OK] docx OK')"
        } catch {
          echo "[ERROR] docx –Ω–µ –Ω–∞–π–¥–µ–Ω!"
          exit 1
        }
        
        try {
          python -c "import trimesh; print('[OK] trimesh OK')"
        } catch {
          echo "[ERROR] trimesh –Ω–µ –Ω–∞–π–¥–µ–Ω!"
          exit 1
        }
        
        try {
          python -c "import numpy; print('[OK] numpy OK')"
        } catch {
          echo "[ERROR] numpy –Ω–µ –Ω–∞–π–¥–µ–Ω!"
          exit 1
        }
        
        echo "–í—Å–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
        
        if (-not (Test-Path "assets\icon.ico")) {
          echo "[WARNING] assets\icon.ico –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑ –∏–∫–æ–Ω–∫–∏"
          $iconParam = ""
        } else {
          echo "[OK] –ò–∫–æ–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: assets\icon.ico"
          $iconParam = "--icon=assets\icon.ico"
        }
        
        # –°–æ–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ PyInstaller
        echo "–ó–∞–ø—É—Å–∫–∞–µ–º PyInstaller..."
        $pyinstallerArgs = @(
          "--onefile",
          "--windowed",
          "--name=DefectAnalyzer"
        )
        
        if ($iconParam) {
          $pyinstallerArgs += $iconParam
        }
        
        $pyinstallerArgs += @(
          "--add-data", "ui;ui",
          "--add-data", "common;common", 
          "--add-data", "docx_generator;docx_generator",
          "--add-data", "adapters;adapters",
          "--add-data", "assets;assets",
          "--add-data", "examples;examples",
          "--add-data", "settings.py;.",
          "--hidden-import=tkinter",
          "--hidden-import=tkinter.ttk",
          "--hidden-import=tkinter.messagebox",
          "--hidden-import=tkinter.filedialog",
          "--hidden-import=PIL",
          "--hidden-import=PIL.Image",
          "--hidden-import=PIL.ImageTk",
          "--hidden-import=openai",
          "--hidden-import=pathlib",
          "--hidden-import=threading",
          "--hidden-import=json",
          "--hidden-import=logging",
          "--hidden-import=requests",
          "--hidden-import=docx",
          "--hidden-import=dotenv",
          "--hidden-import=trimesh",
          "--hidden-import=numpy",
          "main.py"
        )
        
        echo "–ê—Ä–≥—É–º–µ–Ω—Ç—ã PyInstaller:"
        $pyinstallerArgs | ForEach-Object { echo "  $_" }
        
        echo "–ó–∞–ø—É—Å–∫–∞–µ–º PyInstaller —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º..."
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª –¥–ª—è PyInstaller
        $logFile = "pyinstaller.log"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º PyInstaller —Å –æ—Ç–ª–∞–¥–∫–æ–π
        & pyinstaller @pyinstallerArgs --log-level=DEBUG 2>&1 | Tee-Object -FilePath $logFile
        
        echo "PyInstaller –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: $LASTEXITCODE"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–∞
        if (Test-Path $logFile) {
          echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞ PyInstaller:"
          Get-Content $logFile -Tail 50 | ForEach-Object { echo "  $_" }
        }
        
        if ($LASTEXITCODE -ne 0) {
          echo "[ERROR] –û—à–∏–±–∫–∞ PyInstaller! –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: $LASTEXITCODE"
          echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π"
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ dist –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
          if (Test-Path "dist") {
            echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ dist:"
            Get-ChildItem -Path "dist" -Recurse | ForEach-Object { echo "  $($_.FullName)" }
          }
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏
          echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏:"
          Get-ChildItem -Path "." | ForEach-Object { echo "  $($_.Name)" }
          
          exit 1
        }
        
        echo "[OK] PyInstaller –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ"
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ build/win
        if (Test-Path "dist\DefectAnalyzer.exe") {
          Copy-Item "dist\DefectAnalyzer.exe" "build\win\" -Force
          echo "[OK] DefectAnalyzer.exe —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ build\win\"
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
          $fileInfo = Get-Item "build\win\DefectAnalyzer.exe"
          echo "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: $([math]::Round($fileInfo.Length / 1MB, 2)) MB"
        } else {
          echo "[ERROR] DefectAnalyzer.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ dist\"
          exit 1
        }
    
    - name: üìù Update installer script version
      run: |
        echo "–û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ —Å–∫—Ä–∏–ø—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞..."
        
        $version = "${{ steps.version.outputs.APP_VERSION }}"
        $issFile = "installer\windows\DefectAnalyzer.iss"
        
        if (Test-Path $issFile) {
          # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ iss —Ñ–∞–π–ª–µ
          $content = Get-Content $issFile -Raw
          echo "–ò—Å—Ö–æ–¥–Ω–∞—è –≤–µ—Ä—Å–∏—è AppVersion: $version"
          
          $content = $content -replace '#define AppVersion "[^"]*"', "#define AppVersion `"$version`""
          
          # –û—á–∏—â–∞–µ–º –≤–µ—Ä—Å–∏—é –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è VersionInfoVersion
          $cleanVersion = $version -replace '[^0-9.]', ''
          echo "–û—á–∏—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: $cleanVersion"
          
          # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è VersionInfoVersion (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ X.Y.Z.W)
          $versionParts = $cleanVersion -split '\.'
          if ($versionParts.Length -ge 3) {
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —á–∞—Å—Ç–∏ –≤–µ—Ä—Å–∏–∏
            $major = if ($versionParts[0]) { $versionParts[0] } else { "0" }
            $minor = if ($versionParts[1]) { $versionParts[1] } else { "0" }
            $patch = if ($versionParts[2]) { $versionParts[2] } else { "0" }
            $versionInfoVersion = "$major.$minor.$patch.0"
          } else {
            $versionInfoVersion = "1.0.0.0"
          }
          
          echo "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è VersionInfoVersion: $versionInfoVersion"
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ VersionInfoVersion
          $currentVersionInfo = ($content | Select-String 'VersionInfoVersion=.*').Matches[0].Value
          echo "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ VersionInfoVersion: $currentVersionInfo"
          
          # –û–±–Ω–æ–≤–ª—è–µ–º VersionInfoVersion
          $content = $content -replace 'VersionInfoVersion=.*', "VersionInfoVersion=$versionInfoVersion"
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          $newVersionInfo = ($content | Select-String 'VersionInfoVersion=.*').Matches[0].Value
          echo "–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ VersionInfoVersion: $newVersionInfo"
          
          Set-Content $issFile -Value $content -Encoding UTF8
          echo "[OK] –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ $issFile –¥–æ $version"
          echo "[OK] VersionInfoVersion —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ $versionInfoVersion"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª—Å—è
          echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:"
          $finalContent = Get-Content $issFile -Raw
          $finalVersionInfo = ($finalContent | Select-String 'VersionInfoVersion=.*').Matches[0].Value
          echo "–§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ VersionInfoVersion: $finalVersionInfo"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∏)
          if ($finalVersionInfo -match 'VersionInfoVersion=(\d+\.\d+\.\d+\.\d+)') {
            echo "[OK] VersionInfoVersion –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: $($matches[1])"
          } else {
            echo "[ERROR] VersionInfoVersion –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: $finalVersionInfo"
            echo "–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ VersionInfoVersion:"
            $context = ($finalContent | Select-String -Pattern 'VersionInfoVersion=.*' -Context 2,2).Line
            $context | ForEach-Object { echo "  $_" }
          }
        } else {
          echo "[ERROR] –§–∞–π–ª $issFile –Ω–µ –Ω–∞–π–¥–µ–Ω!"
          exit 1
        }
    
    - name: üîß Compile installer with Inno Setup
      run: |
        echo "–ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —Å –ø–æ–º–æ—â—å—é Inno Setup..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ iss —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∫–æ–º–ø–∏–ª—è—Ü–∏–µ–π
        $issFile = "installer\windows\DefectAnalyzer.iss"
        if (Test-Path $issFile) {
          echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ $issFile –ø–µ—Ä–µ–¥ –∫–æ–º–ø–∏–ª—è—Ü–∏–µ–π:"
          $content = Get-Content $issFile -Raw
          $versionInfo = ($content | Select-String 'VersionInfoVersion=.*').Matches[0].Value
          echo "VersionInfoVersion –≤ —Ñ–∞–π–ª–µ: $versionInfo"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
          if ($versionInfo -match 'VersionInfoVersion=(\d+\.\d+\.\d+\.\d+)') {
            echo "[OK] VersionInfoVersion –≤–∞–ª–∏–¥–Ω–∞: $($matches[1])"
          } else {
            echo "[ERROR] VersionInfoVersion –Ω–µ–≤–∞–ª–∏–¥–Ω–∞: $versionInfo"
            echo "–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–æ–∫—Ä—É–≥ VersionInfoVersion:"
            $lines = Get-Content $issFile
            for ($i = 0; $i -lt $lines.Length; $i++) {
              if ($lines[$i] -match 'VersionInfoVersion') {
                echo "–°—Ç—Ä–æ–∫–∞ $($i+1): $($lines[$i])"
                if ($i -gt 0) { echo "–°—Ç—Ä–æ–∫–∞ $($i): $($lines[$i-1])" }
                if ($i -lt $lines.Length-1) { echo "–°—Ç—Ä–æ–∫–∞ $($i+2): $($lines[$i+1])" }
                break
              }
            }
          }
        }
        
        $issFile = "installer\windows\DefectAnalyzer.iss"
        $isccPath = "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe"
        
        if (-not (Test-Path $isccPath)) {
          $isccPath = "${env:ProgramFiles}\Inno Setup 6\ISCC.exe"
        }
        
        if (-not (Test-Path $isccPath)) {
          echo "[ERROR] ISCC.exe –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É Inno Setup"
          Get-ChildItem -Path "${env:ProgramFiles}" -Filter "*Inno*" -Recurse
          Get-ChildItem -Path "${env:ProgramFiles(x86)}" -Filter "*Inno*" -Recurse
          exit 1
        }
        
        echo "–ò—Å–ø–æ–ª—å–∑—É–µ–º ISCC: $isccPath"
        echo "–ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º: $issFile"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é
        & $isccPath $issFile
        
        if ($LASTEXITCODE -eq 0) {
          echo "[OK] –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω!"
        } else {
          echo "[ERROR] –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞!"
          exit 1
        }
    
    - name: üìã List generated files
      run: |
        echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É dist (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–ª—è Inno Setup)
        if (Test-Path "dist") {
          echo "–§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ dist:"
          Get-ChildItem -Path "dist" | ForEach-Object { echo "  - $($_.Name) ($($_.Length) bytes)" }
        } else {
          echo "‚ö†Ô∏è –ü–∞–ø–∫–∞ dist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É installer (–µ—Å–ª–∏ OutputDir –∏–∑–º–µ–Ω–µ–Ω)
        if (Test-Path "installer") {
          echo "–§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ installer:"
          Get-ChildItem -Path "installer" -Recurse | ForEach-Object { echo "  - $($_.FullName)" }
        }
        
        # –ò—â–µ–º setup —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ
        $setupFiles = Get-ChildItem -Path "." -Filter "Setup-*.exe" -Recurse
        if ($setupFiles.Count -gt 0) {
          echo "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∏:"
          $setupFiles | ForEach-Object { echo "  - $($_.FullName) ($($_.Length) bytes)" }
        }
    
    - name: üì¶ Upload installer artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: |
          dist/*.exe
          Setup-*.exe
        retention-days: 30
    
    - name: üìä Build summary
      run: |
        echo "=========================================="
        echo "üèóÔ∏è –°–ë–û–†–ö–ê –£–°–¢–ê–ù–û–í–©–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê"
        echo "=========================================="
        echo "–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${{ steps.version.outputs.APP_VERSION }}"
        echo "Git commit: ${{ github.sha }}"
        echo "Git ref: ${{ github.ref }}"
        echo "=========================================="
        echo ""
        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç 'windows-installer'"
        echo "üì• –°–∫–∞—á–∞—Ç—å –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ 'Actions' -> 'Artifacts'"
        echo ""
        echo "üîß –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏:"
        echo "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Inno Setup"
        echo "2. –û—Ç–∫—Ä–æ–π—Ç–µ installer/windows/DefectAnalyzer.iss"
        echo "3. –ù–∞–∂–º–∏—Ç–µ F9 –∏–ª–∏ Build -> Compile"
        echo ""
        echo "=========================================="
