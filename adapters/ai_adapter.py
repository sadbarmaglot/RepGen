import json
import uuid
import base64
import os
import logging
import tempfile
import subprocess
from pathlib import Path
from openai import OpenAI
from common.defects_db import SYSTEM_MESSAGE, PROMPT

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ò–ò –∑–∞–ø—Ä–æ—Å–æ–≤
ai_logger = logging.getLogger('ai_requests')
ai_logger.setLevel(logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
if not ai_logger.handlers:
    log_handler = logging.FileHandler('ai_requests.log', encoding='utf-8')
    log_handler.setLevel(logging.INFO)
    log_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    log_handler.setFormatter(log_formatter)
    ai_logger.addHandler(log_handler)
    
    # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(log_formatter)
    ai_logger.addHandler(console_handler)

# –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
_client = None

def get_openai_client():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI —Å –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    global _client
    if _client is None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        api_key = os.environ.get('OPENAI_API_KEY')
        
        # –ï—Å–ª–∏ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ .env —Ñ–∞–π–ª–∞
        if not api_key:
            try:
                from dotenv import load_dotenv
                # –ò—â–µ–º .env —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
                root_dir = Path(__file__).parent.parent
                env_file = root_dir / '.env'
                if env_file.exists():
                    load_dotenv(env_file)
                    api_key = os.environ.get('OPENAI_API_KEY')
            except ImportError:
                pass
        
        if not api_key:
            raise ValueError("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é OPENAI_API_KEY –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª.")
        
        _client = OpenAI(api_key=api_key)
    
    return _client

def convert_heic_to_jpeg(heic_path: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è HEIC —Ñ–∞–π–ª–∞ –≤ JPEG –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å OpenAI API
    
    Args:
        heic_path: –ü—É—Ç—å –∫ HEIC —Ñ–∞–π–ª—É
        
    Returns:
        str: –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É JPEG —Ñ–∞–π–ª—É
    """
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_file = tempfile.NamedTemporaryFile(suffix='.jpg', delete=False)
    temp_path = temp_file.name
    temp_file.close()
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pillow-heif (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        try:
            from pillow_heif import register_heif_opener
            register_heif_opener()
            
            from PIL import Image
            with Image.open(heic_path) as img:
                img.convert('RGB').save(temp_path, 'JPEG', quality=95)
                return temp_path
                
        except ImportError:
            # –ï—Å–ª–∏ pillow-heif –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ImageMagick
            try:
                result = subprocess.run(['magick', heic_path, temp_path], 
                                      capture_output=True, text=True)
                
                if result.returncode == 0:
                    return temp_path
                else:
                    raise Exception(f"ImageMagick error: {result.stderr}")
                    
            except FileNotFoundError:
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å –ø–æ–º–æ—â—å—é macOS sips
                if os.name == 'posix':  # macOS/Linux
                    try:
                        result = subprocess.run([
                            'sips', '-s', 'format', 'jpeg', heic_path, '--out', temp_path
                        ], capture_output=True, text=True)
                        
                        if result.returncode == 0:
                            return temp_path
                        else:
                            raise Exception(f"sips error: {result.stderr}")
                    except FileNotFoundError:
                        pass
                
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å HEIC —Ñ–∞–π–ª. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pillow-heif: pip install pillow-heif")
                
    except Exception as e:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if os.path.exists(temp_path):
            try:
                os.unlink(temp_path)
            except:
                pass
        raise Exception(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ HEIC: {str(e)}")

def analyze_local_photo(photo_path: str) -> dict:
    """
    –ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ –±–µ–∑ Telegram API –∏ GCS
    
    Args:
        photo_path: –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–µ—Ñ–µ–∫—Ç–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    """
    request_id = str(uuid.uuid4())[:8]
    
    ai_logger.info(f"[{request_id}] üîÑ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ: {photo_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not Path(photo_path).exists():
        ai_logger.error(f"[{request_id}] ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª HEIC/HEIF
    file_extension = Path(photo_path).suffix.lower()
    temp_file_path = None
    
    try:
        if file_extension in ['.heic', '.heif']:
            ai_logger.info(f"[{request_id}] üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é HEIC —Ñ–∞–π–ª –≤ JPEG...")
            temp_file_path = convert_heic_to_jpeg(photo_path)
            photo_path_to_use = temp_file_path
            ai_logger.info(f"[{request_id}] ‚úÖ HEIC —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        else:
            photo_path_to_use = photo_path
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 –¥–ª—è OpenAI
        with open(photo_path_to_use, "rb") as image_file:
            image_data = image_file.read()
            base64_image = base64.b64encode(image_data).decode('utf-8')
            
        image_size_kb = len(image_data) / 1024
        ai_logger.info(f"[{request_id}] üì∏ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_size_kb:.1f} KB")
        
    except Exception as e:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if temp_file_path and os.path.exists(temp_file_path):
            try:
                os.unlink(temp_file_path)
            except:
                pass
        raise e
    
    try:
        ai_logger.info(f"[{request_id}] ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ OpenAI GPT-4o...")
        client = get_openai_client()
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                SYSTEM_MESSAGE,
                {"role": "user", "content": [
                    {"type": "text", "text": PROMPT},
                    {"type": "image_url", "image_url": {
                        "url": f"data:image/jpeg;base64,{base64_image}"
                    }}
                ]}
            ],
            temperature=0.2,
            max_tokens=1024,
            response_format={"type": "json_object"}
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        tokens_used = response.usage.total_tokens if response.usage else 0
        ai_logger.info(f"[{request_id}] ‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI. –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {tokens_used}")
        ai_logger.info(f"[{request_id}] üìù –ú–æ–¥–µ–ª—å: {response.model}, ID: {response.id}")
        
        result = json.loads(response.choices[0].message.content)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        defect_type = result.get("defect_description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        ai_logger.info(f"[{request_id}] üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {defect_type[:50]}...")
        
        result_data = {
            "defect": result.get("defect_description", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"),
            "eliminating_method": result.get("recommendation", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"),
            "image_path": photo_path,
            "file_path": photo_path,
            "filename": Path(photo_path).name,
            "analyzed": True,
            "status": "completed"
        }
        
        return result_data
        
    except Exception as e:
        ai_logger.error(f"[{request_id}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
        ai_logger.error(f"[{request_id}] üì± –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ: {e}")
        raise e
        
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if temp_file_path and os.path.exists(temp_file_path):
            try:
                os.unlink(temp_file_path)
                ai_logger.info(f"[{request_id}] üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_file_path}")
            except Exception as cleanup_error:
                ai_logger.warning(f"[{request_id}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {cleanup_error}")

def batch_analyze_photos(photo_paths: list) -> list:
    """
    –ê–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    
    Args:
        photo_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    """
    batch_id = str(uuid.uuid4())[:8]
    results = []
    total = len(photo_paths)
    
    ai_logger.info(f"[BATCH-{batch_id}] üöÄ –ù–∞—á–∏–Ω–∞—é –ø–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {total} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
    
    for i, photo_path in enumerate(photo_paths):
        try:
            ai_logger.info(f"[BATCH-{batch_id}] üì∏ –§–æ—Ç–æ {i+1}/{total}: {Path(photo_path).name}")
            result = analyze_local_photo(photo_path)
            results.append(result)
        except Exception as e:
            results.append({
                "defect": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}",
                "eliminating_method": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                "image_path": photo_path,
                "file_path": photo_path,
                "filename": Path(photo_path).name,
                "error": True,
                "analyzed": False,
                "status": "error"
            })
    
    return results