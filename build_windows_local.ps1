# ==========================================
# ü™ü –°–ë–û–†–ö–ê WINDOWS –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –ù–ê WINDOWS (PowerShell)
# ==========================================

param(
    [switch]$Clean,
    [switch]$NoVirtualEnv,
    [string]$PythonPath = "python"
)

Write-Host "==========================================" -ForegroundColor Cyan
Write-Host "ü™ü –°–ë–û–†–ö–ê WINDOWS –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –ù–ê WINDOWS" -ForegroundColor Cyan
Write-Host "==========================================" -ForegroundColor Cyan

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
function Write-Status {
    param([string]$Message, [string]$Type = "Info")
    $timestamp = Get-Date -Format "HH:mm:ss"
    switch ($Type) {
        "Success" { Write-Host "‚úÖ $Message" -ForegroundColor Green }
        "Error" { Write-Host "‚ùå $Message" -ForegroundColor Red }
        "Warning" { Write-Host "‚ö†Ô∏è $Message" -ForegroundColor Yellow }
        default { Write-Host "‚ÑπÔ∏è $Message" -ForegroundColor Blue }
    }
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Python
Write-Status "–ü—Ä–æ–≤–µ—Ä—è–µ–º Python..."
try {
    $pythonVersion = & $PythonPath --version 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Status "Python –Ω–∞–π–¥–µ–Ω: $pythonVersion" "Success"
    } else {
        throw "Python –Ω–µ –Ω–∞–π–¥–µ–Ω"
    }
} catch {
    Write-Status "Python –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python —Å https://python.org" "Error"
    exit 1
}

# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫
if ($Clean) {
    Write-Status "–û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–±–æ—Ä–∫–∏..."
    if (Test-Path "build") { Remove-Item "build" -Recurse -Force }
    if (Test-Path "dist") { Remove-Item "dist" -Recurse -Force }
    if (Test-Path "*.spec") { Remove-Item "*.spec" -Force }
    Write-Status "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" "Success"
}

# –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
if (-not $NoVirtualEnv) {
    Write-Status "–°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
    if (Test-Path "venv_build") {
        Remove-Item "venv_build" -Recurse -Force
    }
    & $PythonPath -m venv venv_build
    if ($LASTEXITCODE -eq 0) {
        Write-Status "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ" "Success"
    } else {
        Write-Status "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è" "Error"
        exit 1
    }
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    Write-Status "–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
    $activateScript = "venv_build\Scripts\Activate.ps1"
    if (Test-Path $activateScript) {
        & $activateScript
        Write-Status "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ" "Success"
    } else {
        Write-Status "–°–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω" "Error"
        exit 1
    }
}

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
Write-Status "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
& $PythonPath -m pip install --upgrade pip
& $PythonPath -m pip install pyinstaller

if (Test-Path "requirements.txt") {
    Write-Status "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt..."
    & $PythonPath -m pip install -r requirements.txt
    if ($LASTEXITCODE -eq 0) {
        Write-Status "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" "Success"
    } else {
        Write-Status "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π" "Error"
        exit 1
    }
} else {
    Write-Status "requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω" "Warning"
}

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–±–æ—Ä–∫–∏
Write-Status "–°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–±–æ—Ä–∫–∏..."
if (-not (Test-Path "build\win")) {
    New-Item -ItemType Directory -Path "build\win" -Force | Out-Null
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
if (-not (Test-Path "main.py")) {
    Write-Status "main.py –Ω–µ –Ω–∞–π–¥–µ–Ω!" "Error"
    exit 1
}

# –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
Write-Status "–°–æ–±–∏—Ä–∞–µ–º Windows –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."
if (Test-Path "build_exe.py") {
    Write-Status "–ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É —á–µ—Ä–µ–∑ build_exe.py..."
    & $PythonPath build_exe.py
} else {
    Write-Status "–ó–∞–ø—É—Å–∫–∞–µ–º PyInstaller –Ω–∞–ø—Ä—è–º—É—é..."
    $pyinstallerArgs = @(
        "--onefile",
        "--windowed", 
        "--name=DefectAnalyzer",
        "--icon=assets\icon.ico",
        "main.py"
    )
    & $PythonPath -m PyInstaller $pyinstallerArgs
}

if ($LASTEXITCODE -eq 0) {
    Write-Status "–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" "Success"
} else {
    Write-Status "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏" "Error"
    exit 1
}

# –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
if (Test-Path "dist\DefectAnalyzer.exe") {
    Copy-Item "dist\DefectAnalyzer.exe" "build\win\" -Force
    Write-Status "DefectAnalyzer.exe —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ build\win\" "Success"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    $fileInfo = Get-Item "build\win\DefectAnalyzer.exe"
    Write-Status "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: $([math]::Round($fileInfo.Length / 1MB, 2)) MB" "Info"
    Write-Status "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: $($fileInfo.CreationTime)" "Info"
} else {
    Write-Status "DefectAnalyzer.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ dist\" "Error"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
if (Test-Path "build\win\DefectAnalyzer.exe") {
    Write-Host ""
    Write-Host "==========================================" -ForegroundColor Green
    Write-Host "üéØ –°–ë–û–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!" -ForegroundColor Green
    Write-Host "==========================================" -ForegroundColor Green
    Write-Host "üìÅ EXE —Ñ–∞–π–ª: build\win\DefectAnalyzer.exe" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "üîß –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞:" -ForegroundColor Cyan
    Write-Host "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Inno Setup" -ForegroundColor White
    Write-Host "2. –û—Ç–∫—Ä–æ–π—Ç–µ installer\windows\DefectAnalyzer.iss" -ForegroundColor White
    Write-Host "3. –ù–∞–∂–º–∏—Ç–µ F9 –∏–ª–∏ Build -> Compile" -ForegroundColor White
    Write-Host "==========================================" -ForegroundColor Green
} else {
    Write-Status "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–±—Ä–∞–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" "Error"
    exit 1
}

# –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
if (-not $NoVirtualEnv) {
    deactivate
}

Write-Host ""
Write-Host "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞..." -ForegroundColor Gray
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
