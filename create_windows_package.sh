#!/bin/bash
# ==========================================
# üì¶ –°–û–ó–î–ê–ù–ò–ï WINDOWS –ü–ê–ö–ï–¢–ê (Python —Å–∫—Ä–∏–ø—Ç—ã + –±–∞—Ç–Ω–∏–∫)
# ==========================================

echo "=========================================="
echo "üì¶ –°–û–ó–î–ê–ù–ò–ï WINDOWS –ü–ê–ö–ï–¢–ê"
echo "=========================================="

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è Windows –ø–∞–∫–µ—Ç–∞
mkdir -p build/win

echo "üìÅ –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É Windows –ø–∞–∫–µ—Ç–∞..."

# –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ Python —Ñ–∞–π–ª—ã
cp main.py build/win/
cp settings.py build/win/

# –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫–∏
cp -r adapters build/win/
cp -r common build/win/
cp -r docx_generator build/win/
cp -r ui build/win/

# –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å—ã
cp -r assets build/win/ 2>/dev/null || echo "–ü–∞–ø–∫–∞ assets –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
cp -r examples build/win/ 2>/dev/null || echo "–ü–∞–ø–∫–∞ examples –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
cp -r 3d_renders build/win/ 2>/dev/null || echo "–ü–∞–ø–∫–∞ 3d_renders –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

# –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
cp requirements.txt build/win/ 2>/dev/null || echo "requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
cp cloud_config.json build/win/ 2>/dev/null || echo "cloud_config.json –Ω–µ –Ω–∞–π–¥–µ–Ω"

# –°–æ–∑–¥–∞–µ–º –±–∞—Ç–Ω–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
cat > build/win/run.bat << 'EOF'
@echo off
title DefectAnalyzer
echo ==========================================
echo üèóÔ∏è DefectAnalyzer - AI Engineering Tool
echo ==========================================
echo.

REM –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Python
python --version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω!
    echo –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python —Å https://python.org
    echo –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Python –¥–æ–±–∞–≤–ª–µ–Ω –≤ PATH
    pause
    exit /b 1
)

echo ‚úÖ Python –Ω–∞–π–¥–µ–Ω
echo.

REM –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not exist "venv" (
    echo üì¶ –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ...
    python -m venv venv
    if errorlevel 1 (
        echo ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è!
        pause
        exit /b 1
    )
    echo ‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ
)

REM –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
echo üîß –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ...
call venv\Scripts\activate.bat

REM –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
echo üì• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...
pip install --upgrade pip
pip install -r requirements.txt

REM –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
echo.
echo üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º DefectAnalyzer...
echo.
python main.py

echo.
echo üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ
pause
EOF

# –°–æ–∑–¥–∞–µ–º README –¥–ª—è Windows –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cat > build/win/README.txt << 'EOF'
==========================================
üèóÔ∏è DefectAnalyzer - AI Engineering Tool
==========================================

–ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ó–ê–ü–£–°–ö–£:

1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Python 3.8+
   –°–∫–∞—á–∞–π—Ç–µ —Å https://python.org

2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ run.bat –¥–≤–æ–π–Ω—ã–º –∫–ª–∏–∫–æ–º
   –ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:
   run.bat

3. –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
   - –°–æ–∑–¥–∞—Å—Ç—Å—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
   - –£—Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
   - –ó–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- Python 3.8 –∏–ª–∏ –≤—ã—à–µ
- –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
- Windows 10/11

–ü–û–î–î–ï–†–ñ–ö–ê:
- GitHub: https://github.com/your-username/RepGen
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: installer/README.md

==========================================
EOF

# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π launcher.exe —á–µ—Ä–µ–∑ Python
cat > build/win/create_launcher.py << 'EOF'
import os
import sys
import subprocess

def create_launcher():
    launcher_code = '''
import os
import sys
import subprocess

def main():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
        result = subprocess.run([sys.executable, "--version"], 
                              capture_output=True, text=True)
        if result.returncode != 0:
            input("Python –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python —Å python.org\\n–ù–∞–∂–º–∏—Ç–µ Enter...")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        if not os.path.exists("venv"):
            print("–°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ...")
            subprocess.run([sys.executable, "-m", "venv", "venv"])
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º venv –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
        if os.name == 'nt':  # Windows
            activate_script = "venv\\Scripts\\activate.bat"
            cmd = f"call {activate_script} && pip install -r requirements.txt && python main.py"
            subprocess.run(["cmd", "/c", cmd])
        else:  # Unix-like
            activate_script = "venv/bin/activate"
            subprocess.run(["bash", "-c", f"source {activate_script} && pip install -r requirements.txt && python main.py"])
            
    except Exception as e:
        input(f"–û—à–∏–±–∫–∞: {e}\\n–ù–∞–∂–º–∏—Ç–µ Enter...")

if __name__ == "__main__":
    main()
'''
    
    with open("launcher.py", "w", encoding="utf-8") as f:
        f.write(launcher_code)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω launcher.py")

if __name__ == "__main__":
    create_launcher()
EOF

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ launcher
cd build/win
python create_launcher.py 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å launcher.py"
cd ../..

# –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
rm -f build/win/create_launcher.py

echo ""
echo "‚úÖ Windows –ø–∞–∫–µ—Ç —Å–æ–∑–¥–∞–Ω!"
echo "üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: build/win/"
echo ""
echo "üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–∫–µ—Ç–∞:"
ls -la build/win/

echo ""
echo "üéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ:"
echo "1. –°–æ–±—Ä–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —á–µ—Ä–µ–∑ GitHub Actions"
echo "2. –ò–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫—É build/win/ –Ω–∞ Windows –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å run.bat"
echo ""
echo "=========================================="
